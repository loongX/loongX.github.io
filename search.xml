<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Rxjava2源码分析</title>
      <link href="/2018/06/13/1_Android/base/Rx/Rxjava2%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
      <url>/2018/06/13/1_Android/base/Rx/Rxjava2%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本文将讲述Rxjava的相关应用和原理，包括基本原理，操作符，线程调用。</p><a id="more"></a><h2 id="1、基本用法"><a href="#1、基本用法" class="headerlink" title="1、基本用法"></a>1、基本用法</h2><p>本文解读是rxjava的2.1.0版本，对应的rxandroid版本为2.0.1。<br>先看看基本用法</p><pre><code class="java">  Observable.create(new ObservableOnSubscribe&lt;Integer&gt;() {            @Override            public void subscribe(@NonNull ObservableEmitter&lt;Integer&gt; e) throws Exception {                e.onNext(1);                e.onNext(2);                e.onNext(3);            }        }).subscribe(new Consumer&lt;String&gt;() {            @Override            public void accept(@NonNull String s) throws Exception {                mRxOperatorsText.append(&quot;accept : &quot; + s +&quot;\n&quot;);                Log.e(TAG, &quot;accept : &quot; + s +&quot;\n&quot; );            }        });</code></pre><h2 id="2、原理探究"><a href="#2、原理探究" class="headerlink" title="2、原理探究"></a>2、原理探究</h2><p>Rxjava主要要素是Observable(被观察者)、Observer(观察者)、subscribe(订阅)和事件。理解这些我们接下来往下看。</p><h3 id="2-1-Observable-create"><a href="#2-1-Observable-create" class="headerlink" title="2.1 Observable.create"></a>2.1 Observable.create</h3><p>跟踪Observable.create</p><pre><code>  @CheckReturnValue    @SchedulerSupport(SchedulerSupport.NONE)    public static &lt;T&gt; Observable&lt;T&gt; create(ObservableOnSubscribe&lt;T&gt; source) {        ObjectHelper.requireNonNull(source, &quot;source is null&quot;);        return RxJavaPlugins.onAssembly(new ObservableCreate&lt;T&gt;(source));    }</code></pre><p>传入的是ObservableOnSubscribe类型对象，方法的返回值是调用RxJavaPlugins.onAssembly()</p><pre><code>public interface ObservableOnSubscribe&lt;T&gt; {    void subscribe(@NonNull ObservableEmitter&lt;T&gt; e) throws Exception;}</code></pre><h4 id="onAssembly"><a href="#onAssembly" class="headerlink" title="onAssembly"></a>onAssembly</h4><p>在RxJavaPlugins里面看到</p><pre><code class="Java">@SuppressWarnings({ &quot;rawtypes&quot;, &quot;unchecked&quot; })    @NonNull    public static &lt;T&gt; Observable&lt;T&gt; onAssembly(@NonNull Observable&lt;T&gt; source) {        Function&lt;? super Observable, ? extends Observable&gt; f = onObservableAssembly;//1        if (f != null) {            return apply(f, source); //2        }        return source;//3    }</code></pre><p>在这里可以看出RxJavaPlugin的作用是方便测试和追踪。可以配合instanceof 等等替换某些你想追踪的Obseravble/Observer/Scheduler等等 。你想想onObservableAssembly不为null的情形。</p><h4 id="1-onObservableAssembly"><a href="#1-onObservableAssembly" class="headerlink" title="//1 onObservableAssembly"></a>//1 onObservableAssembly</h4><p> onObservableAssembly是个对象属性，你可以set和get来控制你的对象，主要是用来测试用的。由于没set该对象，此时的f为null，所以返回 source，也就是上面的基本用法里面new 出来的ObservableOnSubscribe对象</p><pre><code>    static volatile Function&lt;? super Observable, ? extends Observable&gt; onObservableAssembly;</code></pre><p>Function类只有一个方法</p><pre><code>public interface Function&lt;T, R&gt; {    @NonNull    R apply(@NonNull T t) throws Exception;}</code></pre><p>接下来看看ObservableCreate里面有什么</p><pre><code>public final class ObservableCreate&lt;T&gt; extends Observable&lt;T&gt; {    final ObservableOnSubscribe&lt;T&gt; source;    public ObservableCreate(ObservableOnSubscribe&lt;T&gt; source) {        this.source = source;    }    @Override    protected void subscribeActual(Observer&lt;? super T&gt; observer) {        CreateEmitter&lt;T&gt; parent = new CreateEmitter&lt;T&gt;(observer);        observer.onSubscribe(parent);        try {            source.subscribe(parent);        } catch (Throwable ex) {            Exceptions.throwIfFatal(ex);            parent.onError(ex);        }    }    ......}</code></pre><p><strong><em>请记住这个subscribeActual和这个ObservableCreate，下面会用到。</em></strong></p><h3 id="2-2-observable-subscribe-consumer"><a href="#2-2-observable-subscribe-consumer" class="headerlink" title="2.2 observable.subscribe(consumer)"></a>2.2 observable.subscribe(consumer)</h3><p>下面是订阅的环节。</p><pre><code>public final Disposable subscribe(Consumer&lt;? super T&gt; onNext) {        return subscribe(onNext, Functions.ON_ERROR_MISSING, Functions.EMPTY_ACTION, Functions.emptyConsumer());    }</code></pre><p>往下追</p><pre><code>public final Disposable subscribe(Consumer&lt;? super T&gt; onNext, Consumer&lt;? super Throwable&gt; onError,            Action onComplete, Consumer&lt;? super Disposable&gt; onSubscribe) {        ObjectHelper.requireNonNull(onNext, &quot;onNext is null&quot;);        ObjectHelper.requireNonNull(onError, &quot;onError is null&quot;);        ObjectHelper.requireNonNull(onComplete, &quot;onComplete is null&quot;);        ObjectHelper.requireNonNull(onSubscribe, &quot;onSubscribe is null&quot;);        LambdaObserver&lt;T&gt; ls = new LambdaObserver&lt;T&gt;(onNext, onError, onComplete, onSubscribe);//1        subscribe(ls);//2        return ls;    }</code></pre><h4 id="1-LambdaObserver"><a href="#1-LambdaObserver" class="headerlink" title="//1 LambdaObserver"></a>//1 LambdaObserver</h4><p>这里新建了一个LambdaObserver类型的对象，把传入的参数转换了。</p><pre><code>public final class LambdaObserver&lt;T&gt; extends AtomicReference&lt;Disposable&gt; implements Observer&lt;T&gt;, Disposable {    private static final long serialVersionUID = -7251123623727029452L;    final Consumer&lt;? super T&gt; onNext;    final Consumer&lt;? super Throwable&gt; onError;    final Action onComplete;    final Consumer&lt;? super Disposable&gt; onSubscribe;    public LambdaObserver(Consumer&lt;? super T&gt; onNext, Consumer&lt;? super Throwable&gt; onError,            Action onComplete,            Consumer&lt;? super Disposable&gt; onSubscribe) {        super();        this.onNext = onNext;        this.onError = onError;        this.onComplete = onComplete;        this.onSubscribe = onSubscribe;    }    @Override    public void onSubscribe(Disposable s) {        if (DisposableHelper.setOnce(this, s)) {            try {                onSubscribe.accept(this);            } catch (Throwable ex) {                Exceptions.throwIfFatal(ex);                s.dispose();                onError(ex);            }        }    }    @Override    public void onNext(T t) {        if (!isDisposed()) {            try {                onNext.accept(t);            } catch (Throwable e) {                Exceptions.throwIfFatal(e);                get().dispose();                onError(e);            }        }    }     @Override    public void onError(Throwable t) {        if (!isDisposed()) {            lazySet(DisposableHelper.DISPOSED);            try {                onError.accept(t);            } catch (Throwable e) {                Exceptions.throwIfFatal(e);                RxJavaPlugins.onError(new CompositeException(t, e));            }        }    }    @Override    public void onComplete() {        if (!isDisposed()) {            lazySet(DisposableHelper.DISPOSED);            try {                onComplete.run();            } catch (Throwable e) {                Exceptions.throwIfFatal(e);                RxJavaPlugins.onError(e);            }        }    }    @Override    public void dispose() {        DisposableHelper.dispose(this);    }    @Override    public boolean isDisposed() {        return get() == DisposableHelper.DISPOSED;    }}</code></pre><p>这里可以看得出LambdaObserver是封装了一层，用来隔绝参数用。</p><h4 id="2-subscribe-ls"><a href="#2-subscribe-ls" class="headerlink" title="//2  subscribe(ls)"></a>//2  subscribe(ls)</h4><pre><code>public abstract class Observable&lt;T&gt; implements ObservableSource&lt;T&gt; {...... public final void subscribe(Observer&lt;? super T&gt; observer) {        ObjectHelper.requireNonNull(observer, &quot;observer is null&quot;);        try {            observer = RxJavaPlugins.onSubscribe(this, observer); //3            ObjectHelper.requireNonNull(observer, &quot;Plugin returned null Observer&quot;);            subscribeActual(observer); //4        } catch (NullPointerException e) { // NOPMD            throw e;        } catch (Throwable e) {            Exceptions.throwIfFatal(e);            // can&#39;t call onError because no way to know if a Disposable has been set or not            // can&#39;t call onSubscribe because the call might have set a Subscription already            RxJavaPlugins.onError(e);            NullPointerException npe = new NullPointerException(&quot;Actually not, but can&#39;t throw other exceptions due to RS&quot;);            npe.initCause(e);            throw npe;        }    }protected abstract void subscribeActual(Observer&lt;? super T&gt; observer);......</code></pre><h4 id="3-RxJavaPlugins-onSubscribe"><a href="#3-RxJavaPlugins-onSubscribe" class="headerlink" title="//3 RxJavaPlugins.onSubscribe"></a>//3 RxJavaPlugins.onSubscribe</h4><pre><code> public static &lt;T&gt; Observer&lt;? super T&gt; onSubscribe(@NonNull Observable&lt;T&gt; source, @NonNull Observer&lt;? super T&gt; observer) {        BiFunction&lt;? super Observable, ? super Observer, ? extends Observer&gt; f = onObservableSubscribe;        if (f != null) {            return apply(f, source, observer);        }        return observer;    }</code></pre><p>这里同样只原路返回observer，因为f为null。</p><h4 id="4-subscribeActual-observer"><a href="#4-subscribeActual-observer" class="headerlink" title="//4 subscribeActual(observer)"></a>//4 subscribeActual(observer)</h4><p>追踪subscribeActual只是一个抽象方法。这时调用的是当初ObservableCreate里面实现的方法。</p><pre><code>    protected abstract void subscribeActual(Observer&lt;? super T&gt; observer);</code></pre><p>ObservableCreate里面的实现</p><pre><code>public final class ObservableCreate&lt;T&gt; extends Observable&lt;T&gt; {    final ObservableOnSubscribe&lt;T&gt; source;    public ObservableCreate(ObservableOnSubscribe&lt;T&gt; source) {        this.source = source;    }    @Override    protected void subscribeActual(Observer&lt;? super T&gt; observer) {        CreateEmitter&lt;T&gt; parent = new CreateEmitter&lt;T&gt;(observer); //1        observer.onSubscribe(parent);        try {            source.subscribe(parent);//2        } catch (Throwable ex) {            Exceptions.throwIfFatal(ex);            parent.onError(ex);        }    }</code></pre><h3 id="2-3-subscribeActual"><a href="#2-3-subscribeActual" class="headerlink" title="2.3 subscribeActual"></a>2.3 subscribeActual</h3><h4 id="1-CreateEmitter-lt-T-gt-parent-new-CreateEmitter-lt-T-gt-observer"><a href="#1-CreateEmitter-lt-T-gt-parent-new-CreateEmitter-lt-T-gt-observer" class="headerlink" title="//1 CreateEmitter &lt; T &gt; parent = new CreateEmitter&lt; T &gt;(observer);"></a>//1 CreateEmitter &lt; T &gt; parent = new CreateEmitter&lt; T &gt;(observer);</h4><p>注意上面，observer传入的对象其实就是LambdaObserver。这个CreateEmitter给LambdaObserver封装了一层</p><pre><code>static final class CreateEmitter&lt;T&gt;    extends AtomicReference&lt;Disposable&gt;    implements ObservableEmitter&lt;T&gt;, Disposable {        private static final long serialVersionUID = -3434801548987643227L;        final Observer&lt;? super T&gt; observer;        CreateEmitter(Observer&lt;? super T&gt; observer) {            this.observer = observer;        }         @Override        public void onNext(T t) {            if (t == null) {                onError(new NullPointerException(&quot;onNext called with null. Null values are generally not allowed in 2.x operators and sources.&quot;));                return;            }            if (!isDisposed()) {                observer.onNext(t);            }        }</code></pre><p>observer.onSubscribe(parent);</p><p>这里是传入系统默认值，这里为空，可以认为不起作用。</p><h4 id="2-source-subscribe-parent"><a href="#2-source-subscribe-parent" class="headerlink" title="//2 source.subscribe(parent);"></a>//2 source.subscribe(parent);</h4><p>看到这个source没，这个是source当初new出来的对象并传进来的。</p><pre><code>new ObservableOnSubscribe&lt;Integer&gt;() {            @Override            public void subscribe(@NonNull ObservableEmitter&lt;Integer&gt; e) throws Exception {                e.onNext(1);                e.onNext(2);                e.onNext(3);            }</code></pre><p>所以在new ObservableOnSubscribe里面的subscribe调用的e.onNext就调用到了后来new Consumer里面的 accept方法。</p><pre><code>new Consumer&lt;String&gt;() {            @Override            public void accept(@NonNull String s) throws Exception {                mRxOperatorsText.append(&quot;accept : &quot; + s +&quot;\n&quot;);                Log.e(TAG, &quot;accept : &quot; + s +&quot;\n&quot; );            }        }</code></pre><p>这一篇将讲下Rxjava2的操作符。在Rxjava里面最常用的是map操作符，接下来将从map入手分析。</p><h2 id="1-map操作符的基本用法"><a href="#1-map操作符的基本用法" class="headerlink" title="1.map操作符的基本用法"></a>1.map操作符的基本用法</h2><p>这里按照国际惯例，先上map的基本用法。</p><pre><code>Observable.create(new ObservableOnSubscribe&lt;Integer&gt;() {            @Override            public void subscribe(@NonNull ObservableEmitter&lt;Integer&gt; e) throws Exception {                e.onNext(1);                e.onNext(2);                e.onNext(3);            }        }).map(new Function&lt;Integer, String&gt;() {            @Override            public String apply(@NonNull Integer integer) throws Exception {                return &quot;This is result &quot; + integer;            }        }).subscribe(new Consumer&lt;String&gt;() {            @Override            public void accept(@NonNull String s) throws Exception {                mRxOperatorsText.append(&quot;accept : &quot; + s +&quot;\n&quot;);                Log.e(TAG, &quot;accept : &quot; + s +&quot;\n&quot; );            }        });</code></pre><h2 id="2-map源码跟踪"><a href="#2-map源码跟踪" class="headerlink" title="2.map源码跟踪"></a>2.map源码跟踪</h2><h4 id="2-1-map"><a href="#2-1-map" class="headerlink" title="2.1 map"></a>2.1 map</h4><p>跟踪map进去，进入Observable里面，你会发现同样有RxJavaPlugins.onAssembly这东西。</p><pre><code>public final &lt;R&gt; Observable&lt;R&gt; map(Function&lt;? super T, ? extends R&gt; mapper) {        ObjectHelper.requireNonNull(mapper, &quot;mapper is null&quot;);        return RxJavaPlugins.onAssembly(new ObservableMap&lt;T, R&gt;(this, mapper));    }</code></pre><p>RxJavaPlugins.onAssembly上文已经说过了，这次主要关注ObservableMap。<code>new ObservableMap&lt;T, R&gt;(this, mapper)</code>里面的this是create返回的Observable对象，mapper是你给的Function对象。</p><h4 id="2-2-ObservableMap"><a href="#2-2-ObservableMap" class="headerlink" title="2.2 ObservableMap"></a>2.2 ObservableMap</h4><pre><code>public final class ObservableMap&lt;T, U&gt; extends AbstractObservableWithUpstream&lt;T, U&gt; {    final Function&lt;? super T, ? extends U&gt; function;    public ObservableMap(ObservableSource&lt;T&gt; source, Function&lt;? super T, ? extends U&gt; function) {        super(source);        this.function = function;    }    @Override    public void subscribeActual(Observer&lt;? super U&gt; t) {         source.subscribe(new MapObserver&lt;T, U&gt;(t, function));    }    static final class MapObserver&lt;T, U&gt; extends BasicFuseableObserver&lt;T, U&gt; {        final Function&lt;? super T, ? extends U&gt; mapper;        MapObserver(Observer&lt;? super U&gt; actual, Function&lt;? super T, ? extends U&gt; mapper) {            super(actual);            this.mapper = mapper;        }        @Override        public void onNext(T t) {            if (done) { //默认done为false，跳过                return;            }            if (sourceMode != NONE) { //默认sourceMode 为0，跳过                actual.onNext(null);                return;            }            U v;            try {                v = ObjectHelper.requireNonNull(mapper.apply(t), &quot;The mapper function returned a null value.&quot;);//1            } catch (Throwable ex) {                fail(ex);                return;            }            actual.onNext(v);//2        }        @Override        public int requestFusion(int mode) {            return transitiveBoundaryFusion(mode);        }        @Nullable        @Override        public U poll() throws Exception {            T t = qs.poll();            return t != null ? ObjectHelper.&lt;U&gt;requireNonNull(mapper.apply(t), &quot;The mapper function returned a null value.&quot;) : null;        }    }}</code></pre><h3 id="AbstractObservableWithUpstream"><a href="#AbstractObservableWithUpstream" class="headerlink" title="AbstractObservableWithUpstream"></a>AbstractObservableWithUpstream</h3><p>AbstractObservableWithUpstream是什么？它继承了Observable类，把ObservableSource对象保存了起来。</p><pre><code>abstract class AbstractObservableWithUpstream&lt;T, U&gt; extends Observable&lt;U&gt; implements HasUpstreamObservableSource&lt;T&gt; {    /** The source consumable Observable. */    protected final ObservableSource&lt;T&gt; source;    /**     * Constructs the ObservableSource with the given consumable.     * @param source the consumable Observable     */    AbstractObservableWithUpstream(ObservableSource&lt;T&gt; source) {        this.source = source;    }    @Override    public final ObservableSource&lt;T&gt; source() {        return source;    }}</code></pre><h4 id="1-mapper-apply-t"><a href="#1-mapper-apply-t" class="headerlink" title="//1 mapper.apply(t)"></a>//1 mapper.apply(t)</h4><p>在ObservableMap里面，subscribeActual，将完成上游Observable的订阅。MapObserver里面的mapper.apply(t)将上游的t转换成下游所需的U。这里怎么变换是你一开始时候就设定好的。这里我们当初传入map里面的Function如下。</p><pre><code>new Function&lt;Integer, String&gt;() {            @Override            public String apply(@NonNull Integer integer) throws Exception {                return &quot;This is result &quot; + integer;            }        }</code></pre><h4 id="2-actual-onNext-v"><a href="#2-actual-onNext-v" class="headerlink" title="//2 actual.onNext(v)"></a>//2 actual.onNext(v)</h4><p><code>actual.onNext(v);</code> 是交接给下游的Observer。actual对应本例就是当初create的对象，执行onNext方法就是执行当初自己定义的操作。</p><pre><code>new Consumer&lt;String&gt;() {            @Override            public void accept(@NonNull String s) throws Exception {                mRxOperatorsText.append(&quot;accept : &quot; + s +&quot;\n&quot;);                Log.e(TAG, &quot;accept : &quot; + s +&quot;\n&quot; );            }        }</code></pre><p>至此，当初的<code>e.onNext(1)</code> 将得到响应。</p><p>总结一下。订阅过程是最后一个Observable往上一个Observable订阅（本例中是MapObserver）。从最后一个Observable里面的subscribe有个subscribeActual方法调用，这个方法会一层层订阅，直至第一个Observable。然后触发第一个Observable的subscribe，这里面会触发数据流操作。在本例中，订阅至到第一个Observable的subscribe实现类，里面的<code>e.onNext(1);</code> 会触发数据一层层往下流，下一个是MapObserver对数据的操作，到最后的Observable。</p><p>Rxjava2里面最惊艳的莫过于线程调度吗，下文将探讨一下线程调度的原理。</p><h2 id="1-基本用法"><a href="#1-基本用法" class="headerlink" title="1. 基本用法"></a>1. 基本用法</h2><pre><code>Observable.create((ObservableOnSubscribe&lt;Integer&gt;) e -&gt; {         e.onNext(1);         e.onNext(2);         e.onComplete(); })    .subscribeOn(Schedulers.io())    .observeOn(AndroidSchedulers.mainThread())    .subscribe(        i -&gt; System.out.println(&quot;onNext : i= &quot; + i));    }</code></pre><h2 id="observeOn"><a href="#observeOn" class="headerlink" title="observeOn"></a>observeOn</h2><pre><code> @CheckReturnValue    @SchedulerSupport(SchedulerSupport.CUSTOM)    public final Observable&lt;T&gt; observeOn(Scheduler scheduler) {        return observeOn(scheduler, false, bufferSize());    }</code></pre><pre><code> @CheckReturnValue    @SchedulerSupport(SchedulerSupport.CUSTOM)    public final Observable&lt;T&gt; observeOn(Scheduler scheduler, boolean delayError, int bufferSize) {        ObjectHelper.requireNonNull(scheduler, &quot;scheduler is null&quot;);        ObjectHelper.verifyPositive(bufferSize, &quot;bufferSize&quot;);        return RxJavaPlugins.onAssembly(new ObservableObserveOn&lt;T&gt;(this, scheduler, delayError, bufferSize));    }</code></pre><pre><code>@SuppressWarnings({ &quot;rawtypes&quot;, &quot;unchecked&quot; })    @NonNull    public static &lt;T&gt; Observable&lt;T&gt; onAssembly(@NonNull Observable&lt;T&gt; source) {        Function&lt;? super Observable, ? extends Observable&gt; f = onObservableAssembly;        if (f != null) {            return apply(f, source);        }        return source;    }</code></pre><pre><code>public final class ObservableObserveOn&lt;T&gt; extends AbstractObservableWithUpstream&lt;T, T&gt; {    final Scheduler scheduler;    final boolean delayError;    final int bufferSize;    public ObservableObserveOn(ObservableSource&lt;T&gt; source, Scheduler scheduler, boolean delayError, int bufferSize) {        super(source);        this.scheduler = scheduler;        this.delayError = delayError;        this.bufferSize = bufferSize;    }    protected void subscribeActual(Observer&lt;? super T&gt; observer) {        if (this.scheduler instanceof TrampolineScheduler) {            this.source.subscribe(observer);        } else {            Worker w = this.scheduler.createWorker();            this.source.subscribe(new ObservableObserveOn.ObserveOnObserver(observer, w, this.delayError, this.bufferSize));        }    }    static final class ObserveOnObserver&lt;T&gt; extends BasicIntQueueDisposable&lt;T&gt; implements Observer&lt;T&gt;, Runnable {        private static final long serialVersionUID = 6576896619930983584L;        final Observer&lt;? super T&gt; actual;        final Worker worker;        final boolean delayError;        final int bufferSize;        SimpleQueue&lt;T&gt; queue;        Disposable s;        Throwable error;        volatile boolean done;        volatile boolean cancelled;        int sourceMode;        boolean outputFused;        ObserveOnObserver(Observer&lt;? super T&gt; actual, Worker worker, boolean delayError, int bufferSize) {            this.actual = actual;            this.worker = worker;            this.delayError = delayError;            this.bufferSize = bufferSize;        }        public void onSubscribe(Disposable s) {            if (DisposableHelper.validate(this.s, s)) {                this.s = s;                if (s instanceof QueueDisposable) {                    QueueDisposable&lt;T&gt; qd = (QueueDisposable)s;                    int m = qd.requestFusion(7);                    if (m == 1) {                        this.sourceMode = m;                        this.queue = qd;                        this.done = true;                        this.actual.onSubscribe(this);                        this.schedule();                        return;                    }                    if (m == 2) {                        this.sourceMode = m;                        this.queue = qd;                        this.actual.onSubscribe(this);                        return;                    }                }                this.queue = new SpscLinkedArrayQueue(this.bufferSize);                this.actual.onSubscribe(this);            }        }        public void onNext(T t) {            if (!this.done) {                if (this.sourceMode != 2) {                    this.queue.offer(t);                }                this.schedule();            }        }        public void onError(Throwable t) {            if (this.done) {                RxJavaPlugins.onError(t);            } else {                this.error = t;                this.done = true;                this.schedule();            }        }        public void onComplete() {            if (!this.done) {                this.done = true;                this.schedule();            }        }        public void dispose() {            if (!this.cancelled) {                this.cancelled = true;                this.s.dispose();                this.worker.dispose();                if (this.getAndIncrement() == 0) {                    this.queue.clear();                }            }        }        public boolean isDisposed() {            return this.cancelled;        }        void schedule() {            if (this.getAndIncrement() == 0) {                this.worker.schedule(this);            }        }        void drainNormal() {            int missed = 1;            SimpleQueue&lt;T&gt; q = this.queue;            Observer a = this.actual;            do {                if (this.checkTerminated(this.done, q.isEmpty(), a)) {                    return;                }                while(true) {                    boolean d = this.done;                    Object v;                    try {                        v = q.poll();                    } catch (Throwable var7) {                        Exceptions.throwIfFatal(var7);                        this.s.dispose();                        q.clear();                        a.onError(var7);                        this.worker.dispose();                        return;                    }                    boolean empty = v == null;                    if (this.checkTerminated(d, empty, a)) {                        return;                    }                    if (empty) {                        missed = this.addAndGet(-missed);                        break;                    }                    a.onNext(v);                }            } while(missed != 0);        }        void drainFused() {            int missed = 1;            do {                if (this.cancelled) {                    return;                }                boolean d = this.done;                Throwable ex = this.error;                if (!this.delayError &amp;&amp; d &amp;&amp; ex != null) {                    this.actual.onError(this.error);                    this.worker.dispose();                    return;                }                this.actual.onNext((Object)null);                if (d) {                    ex = this.error;                    if (ex != null) {                        this.actual.onError(ex);                    } else {                        this.actual.onComplete();                    }                    this.worker.dispose();                    return;                }                missed = this.addAndGet(-missed);            } while(missed != 0);        }        public void run() {            if (this.outputFused) {                this.drainFused();            } else {                this.drainNormal();            }        }        boolean checkTerminated(boolean d, boolean empty, Observer&lt;? super T&gt; a) {            if (this.cancelled) {                this.queue.clear();                return true;            } else {                if (d) {                    Throwable e = this.error;                    if (this.delayError) {                        if (empty) {                            if (e != null) {                                a.onError(e);                            } else {                                a.onComplete();                            }                            this.worker.dispose();                            return true;                        }                    } else {                        if (e != null) {                            this.queue.clear();                            a.onError(e);                            this.worker.dispose();                            return true;                        }                        if (empty) {                            a.onComplete();                            this.worker.dispose();                            return true;                        }                    }                }                return false;            }        }        public int requestFusion(int mode) {            if ((mode &amp; 2) != 0) {                this.outputFused = true;                return 2;            } else {                return 0;            }        }        @Nullable        public T poll() throws Exception {            return this.queue.poll();        }        public void clear() {            this.queue.clear();        }        public boolean isEmpty() {            return this.queue.isEmpty();        }    }}</code></pre><pre><code>AndroidSchedulers.mainThread()</code></pre><pre><code>public final class AndroidSchedulers {    private static final class MainHolder {        static final Scheduler DEFAULT = new HandlerScheduler(new Handler(Looper.getMainLooper()));    }    private static final Scheduler MAIN_THREAD = RxAndroidPlugins.initMainThreadScheduler(            new Callable&lt;Scheduler&gt;() {                @Override public Scheduler call() throws Exception {                    return MainHolder.DEFAULT;                }            });    /** A {@link Scheduler} which executes actions on the Android main thread. */    public static Scheduler mainThread() {        return RxAndroidPlugins.onMainThreadScheduler(MAIN_THREAD);    }    /** A {@link Scheduler} which executes actions on {@code looper}. */    public static Scheduler from(Looper looper) {        if (looper == null) throw new NullPointerException(&quot;looper == null&quot;);        return new HandlerScheduler(new Handler(looper));    }    private AndroidSchedulers() {        throw new AssertionError(&quot;No instances.&quot;);    }}</code></pre><pre><code>public static Scheduler io() {    return RxJavaPlugins.onIoScheduler(IO);}</code></pre><pre><code>@NonNullpublic static Scheduler onIoScheduler(@NonNull Scheduler defaultScheduler) {    Function&lt;? super Scheduler, ? extends Scheduler&gt; f = onIoHandler;    if (f == null) {        return defaultScheduler;    }    return apply(f, defaultScheduler);}</code></pre><pre><code class="java">public abstract class Scheduler {    /**     * The tolerance for a clock drift in nanoseconds where the periodic scheduler will rebase.     * &lt;p&gt;     * The associated system parameter, {@code rx.scheduler.drift-tolerance}, expects its value in minutes.     */    static final long CLOCK_DRIFT_TOLERANCE_NANOSECONDS;    static {        CLOCK_DRIFT_TOLERANCE_NANOSECONDS = TimeUnit.MINUTES.toNanos(                Long.getLong(&quot;rx2.scheduler.drift-tolerance&quot;, 15));    }    /**     * Returns the clock drift tolerance in nanoseconds.     * &lt;p&gt;Related system property: {@code rx2.scheduler.drift-tolerance} in minutes     * @return the tolerance in nanoseconds     * @since 2.0     */    public static long clockDriftTolerance() {        return CLOCK_DRIFT_TOLERANCE_NANOSECONDS;    }    /**     * Retrieves or creates a new {@link Scheduler.Worker} that represents serial execution of actions.     * &lt;p&gt;     * When work is completed it should be unsubscribed using {@link Scheduler.Worker#dispose()}.     * &lt;p&gt;     * Work on a {@link Scheduler.Worker} is guaranteed to be sequential.     *     * @return a Worker representing a serial queue of actions to be executed     */    @NonNull    public abstract Worker createWorker();    /**     * Returns the &#39;current time&#39; of the Scheduler in the specified time unit.     * @param unit the time unit     * @return the &#39;current time&#39;     * @since 2.0     */    public long now(@NonNull TimeUnit unit) {        return unit.convert(System.currentTimeMillis(), TimeUnit.MILLISECONDS);    }    /**     * Allows the Scheduler instance to start threads     * and accept tasks on them.     * &lt;p&gt;Implementations should make sure the call is idempotent and thread-safe.     * @since 2.0     */    public void start() {    }    /**     * Instructs the Scheduler instance to stop threads     * and stop accepting tasks on any outstanding Workers.     * &lt;p&gt;Implementations should make sure the call is idempotent and thread-safe.     * @since 2.0     */    public void shutdown() {    }    /**     * Schedules the given task on this scheduler non-delayed execution.     *     * &lt;p&gt;     * This method is safe to be called from multiple threads but there are no     * ordering guarantees between tasks.     *     * @param run the task to execute     *     * @return the Disposable instance that let&#39;s one cancel this particular task.     * @since 2.0     */    @NonNull    public Disposable scheduleDirect(@NonNull Runnable run) {        return scheduleDirect(run, 0L, TimeUnit.NANOSECONDS);    }    /**     * Schedules the execution of the given task with the given delay amount.     *     * &lt;p&gt;     * This method is safe to be called from multiple threads but there are no     * ordering guarantees between tasks.     *     * @param run the task to schedule     * @param delay the delay amount, non-positive values indicate non-delayed scheduling     * @param unit the unit of measure of the delay amount     * @return the Disposable that let&#39;s one cancel this particular delayed task.     * @since 2.0     */    @NonNull    public Disposable scheduleDirect(@NonNull Runnable run, long delay, @NonNull TimeUnit unit) {        final Worker w = createWorker();        final Runnable decoratedRun = RxJavaPlugins.onSchedule(run);        DisposeTask task = new DisposeTask(decoratedRun, w);        w.schedule(task, delay, unit);        return task;    }    /**     * Schedules a periodic execution of the given task with the given initial delay and period.     *     * &lt;p&gt;     * This method is safe to be called from multiple threads but there are no     * ordering guarantees between tasks.     *     * &lt;p&gt;     * The periodic execution is at a fixed rate, that is, the first execution will be after the initial     * delay, the second after initialDelay + period, the third after initialDelay + 2 * period, and so on.     *     * @param run the task to schedule     * @param initialDelay the initial delay amount, non-positive values indicate non-delayed scheduling     * @param period the period at which the task should be re-executed     * @param unit the unit of measure of the delay amount     * @return the Disposable that let&#39;s one cancel this particular delayed task.     * @since 2.0     */    @NonNull    public Disposable schedulePeriodicallyDirect(@NonNull Runnable run, long initialDelay, long period, @NonNull TimeUnit unit) {        final Worker w = createWorker();        final Runnable decoratedRun = RxJavaPlugins.onSchedule(run);        PeriodicDirectTask periodicTask = new PeriodicDirectTask(decoratedRun, w);        Disposable d = w.schedulePeriodically(periodicTask, initialDelay, period, unit);        if (d == EmptyDisposable.INSTANCE) {            return d;        }        return periodicTask;    }    /**     * Allows the use of operators for controlling the timing around when     * actions scheduled on workers are actually done. This makes it possible to     * layer additional behavior on this {@link Scheduler}. The only parameter     * is a function that flattens an {@link Flowable} of {@link Flowable}     * of {@link Completable}s into just one {@link Completable}. There must be     * a chain of operators connecting the returned value to the source     * {@link Flowable} otherwise any work scheduled on the returned     * {@link Scheduler} will not be executed.     * &lt;p&gt;     * When {@link Scheduler#createWorker()} is invoked a {@link Flowable} of     * {@link Completable}s is onNext&#39;d to the combinator to be flattened. If     * the inner {@link Flowable} is not immediately subscribed to an calls to     * {@link Worker#schedule} are buffered. Once the {@link Flowable} is     * subscribed to actions are then onNext&#39;d as {@link Completable}s.     * &lt;p&gt;     * Finally the actions scheduled on the parent {@link Scheduler} when the     * inner most {@link Completable}s are subscribed to.     * &lt;p&gt;     * When the {@link Worker} is unsubscribed the {@link Completable} emits an     * onComplete and triggers any behavior in the flattening operator. The     * {@link Flowable} and all {@link Completable}s give to the flattening     * function never onError.     * &lt;p&gt;     * Limit the amount concurrency two at a time without creating a new fix     * size thread pool:     *      * &lt;pre&gt;     * Scheduler limitScheduler = Schedulers.computation().when(workers -&gt; {     *  // use merge max concurrent to limit the number of concurrent     *  // callbacks two at a time     *  return Completable.merge(Flowable.merge(workers), 2);     * });     * &lt;/pre&gt;     * &lt;p&gt;     * This is a slightly different way to limit the concurrency but it has some     * interesting benefits and drawbacks to the method above. It works by     * limited the number of concurrent {@link Worker}s rather than individual     * actions. Generally each {@link Flowable} uses its own {@link Worker}.     * This means that this will essentially limit the number of concurrent     * subscribes. The danger comes from using operators like     * {@link Flowable#zip(org.reactivestreams.Publisher, org.reactivestreams.Publisher, io.reactivex.functions.BiFunction)} where     * subscribing to the first {@link Flowable} could deadlock the     * subscription to the second.     *      * &lt;pre&gt;     * Scheduler limitScheduler = Schedulers.computation().when(workers -&gt; {     *  // use merge max concurrent to limit the number of concurrent     *  // Flowables two at a time     *  return Completable.merge(Flowable.merge(workers, 2));     * });     * &lt;/pre&gt;     *      * Slowing down the rate to no more than than 1 a second. This suffers from     * the same problem as the one above I could find an {@link Flowable}     * operator that limits the rate without dropping the values (aka leaky     * bucket algorithm).     *      * &lt;pre&gt;     * Scheduler slowScheduler = Schedulers.computation().when(workers -&gt; {     *  // use concatenate to make each worker happen one at a time.     *  return Completable.concat(workers.map(actions -&gt; {     *      // delay the starting of the next worker by 1 second.     *      return Completable.merge(actions.delaySubscription(1, TimeUnit.SECONDS));     *  }));     * });     * &lt;/pre&gt;     *      * &lt;p&gt;History: 2.0.1 - experimental     * @param &lt;S&gt; a Scheduler and a Subscription     * @param combine the function that takes a two-level nested Flowable sequence of a Completable and returns     * the Completable that will be subscribed to and should trigger the execution of the scheduled Actions.     * @return the Scheduler with the customized execution behavior     * @since 2.1     */    @SuppressWarnings(&quot;unchecked&quot;)    @NonNull    public &lt;S extends Scheduler &amp; Disposable&gt; S when(@NonNull Function&lt;Flowable&lt;Flowable&lt;Completable&gt;&gt;, Completable&gt; combine) {        return (S) new SchedulerWhen(combine, this);    }    /**     * Sequential Scheduler for executing actions on a single thread or event loop.     * &lt;p&gt;     * Disposing the {@link Worker} cancels all outstanding work and allows resource cleanup.     */    public abstract static class Worker implements Disposable {        /**         * Schedules a Runnable for execution without delay.         *         * &lt;p&gt;The default implementation delegates to {@link #schedule(Runnable, long, TimeUnit)}.         *         * @param run         *            Runnable to schedule         * @return a Disposable to be able to unsubscribe the action (cancel it if not executed)         */        @NonNull        public Disposable schedule(@NonNull Runnable run) {            return schedule(run, 0L, TimeUnit.NANOSECONDS);        }        /**         * Schedules an Runnable for execution at some point in the future.         * &lt;p&gt;         * Note to implementors: non-positive {@code delayTime} should be regarded as non-delayed schedule, i.e.,         * as if the {@link #schedule(Runnable)} was called.         *         * @param run         *            the Runnable to schedule         * @param delay         *            time to wait before executing the action; non-positive values indicate an non-delayed         *            schedule         * @param unit         *            the time unit of {@code delayTime}         * @return a Disposable to be able to unsubscribe the action (cancel it if not executed)         */        @NonNull        public abstract Disposable schedule(@NonNull Runnable run, long delay, @NonNull TimeUnit unit);        /**         * Schedules a cancelable action to be executed periodically. This default implementation schedules         * recursively and waits for actions to complete (instead of potentially executing long-running actions         * concurrently). Each scheduler that can do periodic scheduling in a better way should override this.         * &lt;p&gt;         * Note to implementors: non-positive {@code initialTime} and {@code period} should be regarded as         * non-delayed scheduling of the first and any subsequent executions.         *         * @param run         *            the Runnable to execute periodically         * @param initialDelay         *            time to wait before executing the action for the first time; non-positive values indicate         *            an non-delayed schedule         * @param period         *            the time interval to wait each time in between executing the action; non-positive values         *            indicate no delay between repeated schedules         * @param unit         *            the time unit of {@code period}         * @return a Disposable to be able to unsubscribe the action (cancel it if not executed)         */        @NonNull        public Disposable schedulePeriodically(@NonNull Runnable run, final long initialDelay, final long period, @NonNull final TimeUnit unit) {            final SequentialDisposable first = new SequentialDisposable();            final SequentialDisposable sd = new SequentialDisposable(first);            final Runnable decoratedRun = RxJavaPlugins.onSchedule(run);            final long periodInNanoseconds = unit.toNanos(period);            final long firstNowNanoseconds = now(TimeUnit.NANOSECONDS);            final long firstStartInNanoseconds = firstNowNanoseconds + unit.toNanos(initialDelay);            Disposable d = schedule(new PeriodicTask(firstStartInNanoseconds, decoratedRun, firstNowNanoseconds, sd,                    periodInNanoseconds), initialDelay, unit);            if (d == EmptyDisposable.INSTANCE) {                return d;            }            first.replace(d);            return sd;        }        /**         * Returns the &#39;current time&#39; of the Worker in the specified time unit.         * @param unit the time unit         * @return the &#39;current time&#39;         * @since 2.0         */        public long now(@NonNull TimeUnit unit) {            return unit.convert(System.currentTimeMillis(), TimeUnit.MILLISECONDS);        }        /**         * Holds state and logic to calculate when the next delayed invocation         * of this task has to happen (accounting for clock drifts).         */        final class PeriodicTask implements Runnable {            @NonNull            final Runnable decoratedRun;            @NonNull            final SequentialDisposable sd;            final long periodInNanoseconds;            long count;            long lastNowNanoseconds;            long startInNanoseconds;            PeriodicTask(long firstStartInNanoseconds, @NonNull Runnable decoratedRun,                    long firstNowNanoseconds, @NonNull SequentialDisposable sd, long periodInNanoseconds) {                this.decoratedRun = decoratedRun;                this.sd = sd;                this.periodInNanoseconds = periodInNanoseconds;                lastNowNanoseconds = firstNowNanoseconds;                startInNanoseconds = firstStartInNanoseconds;            }            @Override            public void run() {                decoratedRun.run();                if (!sd.isDisposed()) {                    long nextTick;                    long nowNanoseconds = now(TimeUnit.NANOSECONDS);                    // If the clock moved in a direction quite a bit, rebase the repetition period                    if (nowNanoseconds + CLOCK_DRIFT_TOLERANCE_NANOSECONDS &lt; lastNowNanoseconds                            || nowNanoseconds &gt;= lastNowNanoseconds + periodInNanoseconds + CLOCK_DRIFT_TOLERANCE_NANOSECONDS) {                        nextTick = nowNanoseconds + periodInNanoseconds;                        /*                         * Shift the start point back by the drift as if the whole thing                         * started count periods ago.                         */                        startInNanoseconds = nextTick - (periodInNanoseconds * (++count));                    } else {                        nextTick = startInNanoseconds + (++count * periodInNanoseconds);                    }                    lastNowNanoseconds = nowNanoseconds;                    long delay = nextTick - nowNanoseconds;                    sd.replace(schedule(this, delay, TimeUnit.NANOSECONDS));                }            }        }    }    static class PeriodicDirectTask    implements Runnable, Disposable {        final Runnable run;        @NonNull        final Worker worker;        @NonNull        volatile boolean disposed;        PeriodicDirectTask(@NonNull Runnable run, @NonNull Worker worker) {            this.run = run;            this.worker = worker;        }        @Override        public void run() {            if (!disposed) {                try {                    run.run();                } catch (Throwable ex) {                    Exceptions.throwIfFatal(ex);                    worker.dispose();                    throw ExceptionHelper.wrapOrThrow(ex);                }            }        }        @Override        public void dispose() {            disposed = true;            worker.dispose();        }        @Override        public boolean isDisposed() {            return disposed;        }    }    static final class DisposeTask implements Runnable, Disposable {        final Runnable decoratedRun;        final Worker w;        Thread runner;        DisposeTask(Runnable decoratedRun, Worker w) {            this.decoratedRun = decoratedRun;            this.w = w;        }        @Override        public void run() {            runner = Thread.currentThread();            try {                decoratedRun.run();            } finally {                dispose();                runner = null;            }        }        @Override        public void dispose() {            if (runner == Thread.currentThread() &amp;&amp; w instanceof NewThreadWorker) {                ((NewThreadWorker)w).shutdown();            } else {                w.dispose();            }        }        @Override        public boolean isDisposed() {            return w.isDisposed();        }    }}</code></pre>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Rxjava </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android注解</title>
      <link href="/2017/11/06/1_Android/tools/Android_Annotation/"/>
      <url>/2017/11/06/1_Android/tools/Android_Annotation/</url>
      
        <content type="html"><![CDATA[<p>Android里面的注解一般有两种，一种运行时注解，另外一种是编译时注解。运行时注解是基于反射原理的，编译时注解这个就多点，常见的是基于apt的代码生成。反射，会在运行时候在对应的位置插入对应的操作；而编译时注解会在编译时候生成对应的代码进行编译。对于运行性能来说，反射更耗性能。本章将说下Android的注解。</p><a id="more"></a><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>从下面这张图可以看到Java注解的结构分支。<br><img src="/images/Java%E6%B3%A8%E8%A7%A3.jpg" alt="Java注解"> </p><p> Java注解（Annotation），也叫元数据。一种代码级别的说明。它是JDK1.5及以后版本引入的一个特性，与类、接口、枚举是在同一个层次。它可以声明在包、类、字段、方法、局部变量、方法参数等的前面，用来对这些元素进行说明，注释。<br> 注解是附加在代码中的一些元信息，用于一些工具在编译、运行时进行解析和使用，起到说明、配置的功能。</p><p> （1）元注解<br>元注解是指注解的注解，负责注解其他的注解。有@Retention @Target @Document @Inherited这四种。</p><p>（2）@Retention: 定义注解的保留策略<br>@Retention(RetentionPolicy.SOURCE)   //注解仅存在于源码中，在class字节码文件中不包含<br>@Retention(RetentionPolicy.CLASS)     // 默认的保留策略，注解会在class字节码文件中存在，但运行时无法获得，<br>@Retention(RetentionPolicy.RUNTIME)  // 注解会在class字节码文件中存在，在运行时可以通过反射获取到</p><p>（3）@Target：定义注解的作用目标<br>其定义的源码为：<br>@Target(ElementType.TYPE)   //接口、类、枚举、注解<br>@Target(ElementType.FIELD) //字段、枚举的常量<br>@Target(ElementType.METHOD) //方法<br>@Target(ElementType.PARAMETER) //方法参数<br>@Target(ElementType.CONSTRUCTOR)  //构造函数<br>@Target(ElementType.LOCAL_VARIABLE)//局部变量<br>@Target(ElementType.ANNOTATION_TYPE)//注解<br>@Target(ElementType.PACKAGE) ///包   </p><p>（4）@Document：说明该注解将被包含在javadoc中</p><p>（5）@Inherited：允许子类可以继承父类中的该注解</p><h2 id="运行时注解"><a href="#运行时注解" class="headerlink" title="运行时注解"></a>运行时注解</h2><h3 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h3><h4 id="参数注解"><a href="#参数注解" class="headerlink" title="参数注解"></a>参数注解</h4><p>下面将用注解实现了一个findViewById功能。</p><h5 id="（1）-定义注解"><a href="#（1）-定义注解" class="headerlink" title="（1） 定义注解"></a>（1） 定义注解</h5><pre><code class="Java">package com.example.basedemo.annotation.diy;import java.lang.annotation.ElementType;import java.lang.annotation.Retention;import java.lang.annotation.RetentionPolicy;import java.lang.annotation.Target;@Target(ElementType.FIELD)@Retention(RetentionPolicy.RUNTIME)public @interface ViewInject {    int value();    /* parent view id */    int parentId() default 0;}</code></pre><h5 id="（2）-定义注解处理"><a href="#（2）-定义注解处理" class="headerlink" title="（2） 定义注解处理"></a>（2） 定义注解处理</h5><pre><code class="Java">public class ViewUtils {    private ViewUtils() {    }    public static void inject(Activity activity) {        injectObject(activity, new ViewFinder(activity));    }    @SuppressWarnings(&quot;ConstantConditions&quot;)    private static void injectObject(Object handler, ViewFinder finder) {        Class&lt;?&gt; handlerType = handler.getClass();        // inject view        Field[] fields = handlerType.getDeclaredFields();        if (fields != null &amp;&amp; fields.length &gt; 0) {            for (Field field : fields) {                ViewInject viewInject = field.getAnnotation(ViewInject.class);                if (viewInject != null) {                    try {                        View view = finder.findViewById(viewInject.value(), viewInject.parentId());                        if (view != null) {                            field.setAccessible(true);                            field.set(handler, view);                        }                    } catch (Throwable e) {                        e.printStackTrace();                    }                }            }        }    }}</code></pre><pre><code class="Java">public class ViewFinder {    private Activity activity;    public ViewFinder(Activity activity) {        this.activity = activity;    }    public View findViewById(int id) {        return  activity.findViewById(id);    }    public View findViewById(int id, int pid) {        View pView = null;        if (pid &gt; 0) {            pView = this.findViewById(pid);        }        View view = null;        if (pView != null) {            view = pView.findViewById(id);        } else {            view = this.findViewById(id);        }        return view;    }}</code></pre><h5 id="（3）-注解的使用"><a href="#（3）-注解的使用" class="headerlink" title="（3） 注解的使用"></a>（3） 注解的使用</h5><p>这是activity里面的调用</p><pre><code class="Java">public class DIYAnnotationActivity extends AppCompatActivity {    @ViewInject(R.id.textView)    private TextView textView;    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_annotation);        //调用        ViewUtils.inject(this);        textView.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View view) {                textView.setText(&quot;成功了！&quot;);            }        });    }}</code></pre><p>布局文件比较简单就不罗列了。这里可以看出，反射用法过程是：定义注解–定义注解处理方法–调用。</p><h4 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h4><p>下面将在原有的基础上添加点击事件注解。</p><h5 id="（1）定义注解"><a href="#（1）定义注解" class="headerlink" title="（1）定义注解"></a>（1）定义注解</h5><p>定义一个onclick声明</p><pre><code class="Java">package com.example.basedemo.annotation.diy;import java.lang.annotation.ElementType;import java.lang.annotation.Retention;import java.lang.annotation.RetentionPolicy;import java.lang.annotation.Target;@Target(ElementType.METHOD)@Retention(RetentionPolicy.RUNTIME)public @interface OnClick {    int[] value();    int[] parentId() default 0;}</code></pre><h5 id="（2）定义注解处理"><a href="#（2）定义注解处理" class="headerlink" title="（2）定义注解处理"></a>（2）定义注解处理</h5><p>然后在ViewUtils里声明多一个方法。这是用了Java的动态代理方法。</p><pre><code class="Java">public class ViewUtils {    ......省略    public static void inject(Activity activity) {        injectObject(activity, new ViewFinder(activity));        injectEvent(activity);    }    ......省略    private static void injectEvent(final Activity activity) {        Class&lt;? extends Activity&gt; clazz = activity.getClass();        Method[] methods = clazz.getDeclaredMethods();        for (final Method methodY : methods) {            OnClick click = methodY.getAnnotation(OnClick.class);            if (click != null) {                int[] viewId = click.value();                methodY.setAccessible(true);                Object listener = Proxy.newProxyInstance(View.OnClickListener.class.getClassLoader(),                        new Class[]{View.OnClickListener.class}, new InvocationHandler() {                            @Override                            public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {                                return methodY.invoke(activity, args);                            }                        });                try {                    for (int id : viewId) {                        View v = activity.findViewById(id);                        Method setClickListener = v.getClass().getMethod(&quot;setOnClickListener&quot;, View.OnClickListener.class);                        setClickListener.invoke(v, listener);                    }                } catch (Exception e) {                    e.printStackTrace();                }            }        }    } }</code></pre><h5 id="（3）在activity里面调用"><a href="#（3）在activity里面调用" class="headerlink" title="（3）在activity里面调用"></a>（3）在activity里面调用</h5><pre><code class="Java">    @OnClick(R.id.tb_2)    public void onClick(View v) {        textView.setText(&quot;你按了button2&quot;);    }</code></pre><h4 id="方法注解"><a href="#方法注解" class="headerlink" title="方法注解"></a>方法注解</h4><p>给setcontentview注解</p><h5 id="（1）定义注解-1"><a href="#（1）定义注解-1" class="headerlink" title="（1）定义注解"></a>（1）定义注解</h5><pre><code class="Java">package com.example.basedemo.annotation.diy;import java.lang.annotation.ElementType;import java.lang.annotation.Retention;import java.lang.annotation.RetentionPolicy;import java.lang.annotation.Target;@Target(ElementType.TYPE)@Retention(RetentionPolicy.RUNTIME)public @interface ContentView {    int value();}</code></pre><h5 id="（2）注解处理"><a href="#（2）注解处理" class="headerlink" title="（2）注解处理"></a>（2）注解处理</h5><pre><code class="Java">    public static void injectContentView(Object handler){        Class&lt;?&gt; handlerType = handler.getClass();        // inject ContentView        ContentView contentView = handlerType.getAnnotation(ContentView.class);        if (contentView != null) {            try {                Method setContentViewMethod = handlerType.getMethod(&quot;setContentView&quot;, int.class);                setContentViewMethod.invoke(handler, contentView.value());            } catch (Throwable e) {                e.printStackTrace();            }        }    }</code></pre><h5 id="（3）调用"><a href="#（3）调用" class="headerlink" title="（3）调用"></a>（3）调用</h5><p>activity里面调用</p><pre><code class="Java">@ContentView(R.layout.activity_annotation)public class DIYAnnotationActivity extends AppCompatActivity {    @ViewInject(R.id.textView)    private TextView textView;    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);//        setContentView(R.layout.activity_annotation);        ViewUtils.injectContentView(this);        ViewUtils.inject(this);        textView.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View view) {                textView.setText(&quot;成功了！&quot;);            }        });    }    @OnClick(R.id.tb_2)    public void onClick(View v) {        textView.setText(&quot;你按了button2&quot;);    }}</code></pre><h2 id="编译时注解"><a href="#编译时注解" class="headerlink" title="编译时注解"></a>编译时注解</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>APT(annotation processing tool) 是一种处理注释的工具,它对源代码文件进行检测找出其中的Annotation，使用Annotation进行额外的处理。Annotation处理器在处理Annotation时可以根据源文件中的Annotation生成额外的源文件和其它的文件,APT还会编译生成的源文件和原来的源文件，将它们一起生成class文件.简化工作量。但是在java8 开始apt就被移除了，使用JSR 269 API（Pluggable Annotation Processing API） 来处理注解，所以要用APT要定义编译的jdk版本为1.7。</p><p>实现一个apt工具分两步，一是实现处理器（实现接口AnnotationProcessor），二是实现返回此处理器的工厂类（实现接口AnnotationProcessorFactory）。</p><p>APT首先检测源代码文件中哪些annotation存在。然后APT将查找我们编写的annotation processor factories类，并且要求factories类提供处理源文件中所涉及的annotation的annotation processor。接下来，一个合适的annotation processors将被执行，如果在processors生成源代码文件时，该文件中含有annotation，则APT将重复上面的过程直到没有新文件生成。整个过程APT就像一个在编译时处理annotation的javac.</p><p>编写一个annotation processors需要使用java lib目录中的tools.jar提供的以下4个包：<br><a href="https://docs.oracle.com/javase/7/docs/technotes/guides/apt/" target="_blank" rel="noopener">apt相关资料</a></p><ul><li><p>com.sun.mirror.apt: 和APT交互的接口；</p></li><li><p>com.sun.mirror.declaration: 用于模式化类成员、类方法、类声明的接口；</p></li><li><p>com.sun.mirror.type: 用于模式化源代码中类型的接口；</p></li><li><p>com.sun.mirror.util: 提供了用于处理类型和声明的一些工具。</p></li></ul><ul><li><p>javax.annotation.processing.SupportedAnnotationTypes：这个注解用来注册注解处理器要处理的注解类型。有效值为完全限定名（就是带所在包名和路径的类全名）-通配符（此次英语原文为Wildcards,就是？这个符号代表的类型。比如说List&lt;? extends String,想要深入了解，可以看一下这里）也可以。</p></li><li><p>javax.annotation.processing.SupportedSourceVersion:这是用来注册注解处理器要处理的源代码版本。</p></li><li><p>javax.annotation.processing.SupportedOptions:这个注解用来注册可能通过命令行传递给处理器的操作选项。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Annotation </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Annotation </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>反馈式学习</title>
      <link href="/2017/09/30/StudyByFeedback/"/>
      <url>/2017/09/30/StudyByFeedback/</url>
      
        <content type="html"><![CDATA[<p>&lt;Excerpt in index | 首页摘要&gt;<br>本篇文章将讲述我自己的学习方法——反馈式学习。每个人对学习方法都有不同的理解，可能某个人对某种学习方式有较深刻的感触，而其他人却不感兴趣。这可能是学习方式没能勾起你的生活体验。但如果你深究到底，你可能会发现它们的核心原理是一样的。同样，这篇文章里面的学习形式其实并不重要，最主要的还是其原理。希望你能根据其背后原理整出自己的学习方法。</p><a id="more"></a><p>&lt;The rest of contents | 余下全文&gt;</p><h2 id="一、反馈式学习"><a href="#一、反馈式学习" class="headerlink" title="一、反馈式学习"></a>一、反馈式学习</h2><p>反馈式学习是以反馈为根本的学习方式，一切反馈都可以当作一种学习。你首先搭建好一个有信息反馈的环境，然后在里面探索，在探索过程中逐渐形成知识体系。此时的你犹如一个新奇的小孩走进了糖果屋一样，到处探索，无拘无束，你想要的东西都能从探索中获取到。</p><p>反馈环境可以各式各样的，可以是搜索引擎，可以是调试环境，可以是书籍，也可以是同行专家。你就假定你的反馈环境可以给你各种想要的答案。以搜索引擎作为反馈来源的话，你有什么不懂的概念可以直接用搜索引擎搜索。如果书是你的信息来源，你有什么疑惑就在书上找答案。在调试的时候，你有什么想法你可以放到调试环境里试，它会告诉你正确与否。各种反馈方式其实并不孤立的，你可以把它们组合在一起用。不懂的问题找书，书上没有答案就上网查，百度不到就谷歌搜索，其他博客找不到就官网找。从质量来说，它们的质量从低到高为：网站博客&lt;书籍&lt;官网&lt;源码（这里并不全罗列）。你尽量挑选质量高的信息来源，这样保证了信息的可靠程度。</p><p>反馈式学习本质是自身和反馈源形成反馈回路来修正认知偏差。自身是指现在已有的认知框架，反馈源是对照组。当自身的认知和反馈源存在误差时候，根据反馈来修正偏差。当你在反馈环境里面探索中，错误的认知会被纠正，正确的会被夯实。 </p><p>虽然你知道本质，但在实际操作上不好操作，你会用到另外一个反馈回路：“问题——答案”反馈回路。在考驾照时，有个科目一，是考驾驶的相关规则的，大抵上是在电脑上完成相关的题目的作答。这时候你能获取到到的资料是题库里面的题目。即使刚开始什么都不懂，随着做题，做着做着自己就会了。这个从不会到学会的过程是一个很奇妙的感觉。这时题目和答案构成了一个反馈回路。不断做题的过程中，其实你也是不断修正自己认知。做对做错，答案会告诉你结果。哪怕做的时候没有一点概念，看答案你也能从中学到理论。相比比于你直接看理论，自己做题探索得来的则更加深刻。</p><p>问题和答案的关系将会像下面这图一样。</p><p><img src="/images/%E5%8F%8D%E9%A6%88%E5%BC%8F%E5%AD%A6%E4%B9%A0-%E5%AD%A6%E4%B9%A0%E6%A8%A1%E5%BC%8F.jpg" alt="问题-答案"></p><p>在这里，问题不单单指的是问题，它更代表着一种搓揉机制；答案也同样不单指答案，它是一种学习机制。搓揉机制你想方设法去产生问题的地方，是你学习的方向。你可以复盘，用现在的认知和过去的认知相对比，搓出偏差来。你可以自己对自己提出各种问题。你也可以用下面将要说的框架理论来指导和扩展自己的认知圈。总之，任何你想要提出的问题都尽情地在这里提出。学习机制是你根据问题然后在环境里探索得出的答案。你假定反馈环境是能给你带来任何你想要的答案。你所要做的是在你环境里找到那个答案。搓揉机制产生问题，你就带着问题到环境里探索得到答案返回，然后搓揉机制再根据这答案的基础上继续产生问题，一圈圈扩展。</p><p>反馈式学习是把你放在一个有反馈的容器里反馈。它分为两个观点：结构化，容器化。结构化是把知识整理方法，容器化是用来学习的环境，结构化也细分目标，引导你在容器内前进。下面将细将这两点。</p><h2 id="二、结构化"><a href="#二、结构化" class="headerlink" title="二、结构化"></a>二、结构化</h2><p>结构化概括来说是：自上而下套框架，自下而上提炼框架。主要是用来作为产生学习方向和提炼知识架构用的。</p><h3 id="2-1-自上而下套框架"><a href="#2-1-自上而下套框架" class="headerlink" title="2.1 自上而下套框架"></a>2.1 自上而下套框架</h3><p>狭义的框架指的是知识体系，广义的框架指的是计划。如果你知道一个知识点的知识体系，你要学这个知识，那么这个知识体系架构就变成你要走的路。知识体系上面的每一个节点都是你的计划里面的目标。你一步一脚印，按顺序一个个实现，最终会到达你想去的目的地。但现实情况并没有这么理想，随着时间推移，你的认知会逐渐扩大，你的所认识的知识体系也会有所变化。这就有点抓狂了，有种计划赶不上变化的感觉了。但你也不必慌。一般来说你前一次的框架会是后一次的框架扩展的枝干。你每次掌握住当前层次的大方向，然后在枝节方面再细节化行了。</p><p>下面说个实际的例子。如果让你学一个你从来没接触过的知识的时候，你会怎么做？你可以像下面的这么做。首先，你利用搜索引擎了解到相关概念，了解相关的术语。然后找一个简单的Demo来实现。这个Demo最好是有详细的讲解，这样方便理解。接着，你就在这个Demo上添加其他的功能，丰富这方面的知识。这里你如果能有同行专家来交流就更好了，有人指导还是学得还是比较快的。到最后，为了完善这个知识体系，你需上官网看最官方最权威最全面的解读，如有源码可以直接看源码。</p><p><img src="/images/%E5%8F%8D%E9%A6%88%E5%BC%8F%E5%AD%A6%E4%B9%A0-%E6%89%A9%E5%B1%95%E8%BF%87%E7%A8%8B.jpg" alt="反馈式学习-扩展过程"></p><p>这个学习的过程发生了什么呢？当你刚开始用搜索搜索概念做Demo的时候，你会在心里会形成一个初步的认识。这个初步的认知是颗种子，它会指导后面你要去了解的方向。而后面的看源码问同行是在逐步填充你这个架构，在细节方面丰满它。</p><p>套框架的总体思路是先搭建一个架子，然后往里面填充内容。即使刚开始搭起来的框架有点简陋，那也没关系。随着你的认知进一步发展，你的框架会逐步壮大完善的。你的认知圈子是以螺旋扩展的形式扩大的。换一个行为动力你可能更容易懂些，其实这个就是深挖。平时可能不会这么按部就班地操作，但是心里可以以深挖为方向，你会比较有动力学下去。</p><p><img src="/images/%E5%8F%8D%E9%A6%88%E5%BC%8F%E5%AD%A6%E4%B9%A0_%E6%89%A9%E5%B1%95%E6%A8%A1%E5%BC%8F.png" alt="扩展模式"></p><p>这个也可以用于解决问题上。这个思想好比光学显微镜调节中的粗调和细调。你要观察到你观察的东西，先用粗调螺旋调整到你能看清楚的大致区域，然后用细调的方式来逐步调整。如果你知道解决这个问题的大致流程，那你就可以据此进一步划分，把大的问题分解为小问题，小问题继续划分更小的问题，直到细分最小可执行颗粒，然后一个个解决。</p><p>在每一个阶段里面，大的方向由大纲提供，细节方向可以在头脑里生成。即使你把目标分解到最小可执行颗粒时候你仍然会有很多细节步骤要走的。这些细小目标可能是就是十分钟的计划，全罗列出来就比较繁琐了，心里知道就行。当一个目标执行完成后需要迅速调整，否则你可能就无所事事的空虚之中，所以让你的行动目标保持动态调整中。</p><p><img src="/images/%E5%8F%8D%E9%A6%88%E5%BC%8F%E5%AD%A6%E4%B9%A0_%E9%97%AE%E9%A2%98%E5%88%86%E6%9E%90.png" alt="问题分析"></p><h3 id="2-2-自下而上提炼框架"><a href="#2-2-自下而上提炼框架" class="headerlink" title="2.2 自下而上提炼框架"></a>2.2 自下而上提炼框架</h3><p>提炼框架一般用来提炼知识点。当你不清楚知识点时候可以用此来提炼和总结。提炼框架有以下几个步骤：</p><ul><li>搜罗信息</li><li>罗列信息</li><li>分组分类</li><li>提炼框架</li><li>完善框架</li></ul><p>下面以程序员的出路为例来说明一下。</p><p><strong>(1)搜罗信息</strong></p><p>这个就不用多说了，尽你的能力去搜罗你要的信息。</p><p><strong>(2)罗列信息</strong></p><p>拿一张A4纸把你搜罗的信息全部写下来。不需要什么限制，能想到什么就写什么。</p><p>（做架构师，做管理，接私单、做测试、做金融经理、卖奶茶、开饭店，公务员、写书、做讲师、创业）<br><strong>(3)分组分类</strong><br>根据信息的差异性和共性，把各个信息分组分类。 </p><ul><li>做架构师，做管理，接私单、做讲师、创业、写书、做测试</li><li>做金融经理、卖奶茶、开饭店，公务员</li></ul><p><strong>(4)提炼框架</strong><br>根据分类出来的信息提取框架。 </p><ul><li>行业内<ul><li>做架构师，做管理，接私单、做讲师、创业、写书、做测试</li></ul></li><li>行业外<ul><li>做金融经理、卖奶茶、开饭店，公务员</li></ul></li></ul><p><strong>(5)完善框架</strong><br>根据框架不完善的地方继续补充完整。 这个过程可能要继续重复上面几个步骤。<br>在上面的程序员出路可以继续补充为: </p><ul><li>行业内<ul><li>主业<ul><li>做架构师，做管理、做讲师、创业、做测试</li></ul></li><li>副业<ul><li>接私单，写书 </li></ul></li></ul></li><li>行业外<ul><li>开店<ul><li>卖奶茶、开饭店</li></ul></li><li>其他<ul><li>做金融经理，公务员，啃老……</li></ul></li></ul></li></ul><p>整个过程是一个先发散再收敛的过程。提炼框架后，你对整个知识结构的认知就比较清晰了。</p><p>知识要有结构才好驾驭。首先把知识分解成一个个元素，然后找这些元素之间的联系。这个联系可以是旧知识也可以是新知识，一般是和旧知识联系，这样记忆更加有效。最后运用的时候，你会用这个简化的结构驾驭外部的复杂知识。</p><h2 id="三、容器化"><a href="#三、容器化" class="headerlink" title="三、容器化"></a>三、容器化</h2><p>容器是一个有边界的反馈环境。在这个有限边界的环境内，你自由探索，然后根据反馈来学习。这个环境可以是一个项目，可以是一个知识点，也可以是一本书。下面将从时间、内容、空间三方面来叙说。总得来说，时间和内容上都是一份份输出。</p><h3 id="3-1-时间一份份输出"><a href="#3-1-时间一份份输出" class="headerlink" title="3.1 时间一份份输出"></a>3.1 时间一份份输出</h3><p>无论是有多大的任务，都是时间累积而成。你到达你的目标是靠时间一份份输出的。</p><p><img src="/images/%E6%97%B6%E9%97%B4%E7%AE%A1%E7%90%86.png" alt="时间管理"></p><p>上面的图是时间分配的一种方式。时间是一份份输出。每一份时间里面由任务的时间和冗余时间组成。任务时间是你的学习任务执行时间，冗余时间是给你消化用的。每当你学习完一个知识点后，留出一段冗余时间来复习一下，这样效果会更好。这个的冗余时间不多，但给你直观的感受是像有无限多的时间来消化一样。这样的构造能给你有机会喘气来回顾你所学的知识点。如果一份时间不够那就再加一份，直至学会为止。一份时间可以是1小时，可以是一天，也可以是一个星期，一个月。这时间由你来定。一般选一个星期为一份会比较好点。</p><h3 id="3-2-内容一份份输出"><a href="#3-2-内容一份份输出" class="headerlink" title="3.2 内容一份份输出"></a>3.2 内容一份份输出</h3><p>内容是你目标。用上面的自上下套框架的方式，分解你的学习任务，最后分成一个个点。然后你一个个点去突破。</p><p>具体如下：</p><ul><li><p>1.选一个知识点：*****。</p></li><li><p>2.查阅资料。</p></li><li><p>3.把知识点将给你假想的学习。</p></li><li><p>4.如果卡住，继续看课本查资料。</p></li><li><p>5.租后用简洁的语言流畅地表达出来。</p></li></ul><p>想好在一份时间内你想要学到什么，然后围绕这个目标去查资料，看书。以这个目标是方向来查书，而不是顺着书上的内容顺序来学。这是一个结果思维。它和过程思维不同。结果思维是从你想要结果来规划方向，遇到问题就见招拆招。如果是过程思维，你的思维是专注于问题本身，为解决问题而解决问题。当问题解决了，你学习动力就没了。有时候你是为了维持一个勤奋的状态而勤奋的。那样你会陷入一个焦虑的循环中。一放松就焦虑，享受不了学习带来的成果。为了维持勤奋的状态，你不得不焦虑以维持前进的动力。以结果为向导就没这样的问题了。中间是否勤奋无关紧要，你是为了完成这个目标，你的动力一直都在。</p><p>这里步骤不单指一个知识点，你可以套入为一个项目。你想着未来某个时间内想要完成一个什么样的作品，然后去创作它。以向外输出的形式输出你的知识。这个输出你可以说出来，做出来，或者回想都可以。在回想的过程中哪里还模糊就去补哪里。你就自己选择合适你自己的形式来操作。</p><h3 id="3-3-空间化"><a href="#3-3-空间化" class="headerlink" title="3.3 空间化"></a>3.3 空间化</h3><p>空间化是分给空间成一块块，把你的行为和空间结合在一起，当你一进入这个空间就想做这事。这个怎么理解呢？你可以参照图书馆，你一进入图书馆，你就想看书学习。再比如，你一靠上客厅的沙发，你就想看电视一样。这里空间和某些行为联系在一起了。这里的行为有两种，一个是他人给你的，另外一个是你过去在这个空间的行为。你在图书馆，你看到别人都在看书，你行为就会向着这方向来趋近。你过去在沙发上都是在看电视的，你在这个空间就绑定了这个看电视的行为，一靠近就想看电视了。</p><p>如果过去你都是一打开电脑就娱乐的话，我想你很难静下心来学习了。因为你一边踩着刹车想要学习，一边踩着油门说我要看娱乐。要解决这个问题是找个书房，在这个书房里面你就只学习。你在这个空间内做的事情越纯粹，你和这个空间绑定越牢固。当你下次再进入这个书房内就会想着学习了。如果不得不用电脑的话，就建议你用两台电脑，一台专门用来学习，一台专门用来娱乐的。你在家学习的话就专门培养这个一个环境，这样学习才有效率。</p>]]></content>
      
      
      <categories>
          
          <category> 综合 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 综合 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo博客搭建</title>
      <link href="/2017/09/23/100_Project/blog/Hexo_Blog/"/>
      <url>/2017/09/23/100_Project/blog/Hexo_Blog/</url>
      
        <content type="html"><![CDATA[<p>&lt;Excerpt in index | 首页摘要&gt; </p><p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown解析文章，生成的静态网页布置在GitHub上面，作为个人博客使用十分方便。本文前面部分将讲Windows10环境来搭建hexo博客，并介绍hexo博客的相关设置以及优化，后面会有linux环境下的相关配置。</p><a id="more"></a><p>&lt;The rest of contents | 余下全文&gt;</p><h1 id="一、Windows环境"><a href="#一、Windows环境" class="headerlink" title="一、Windows环境"></a>一、Windows环境</h1><blockquote><p>部分linux命令请在git base里面执行。</p></blockquote><h2 id="1-1-环境搭建"><a href="#1-1-环境搭建" class="headerlink" title="1.1 环境搭建"></a>1.1 环境搭建</h2><h3 id="1-1-1-安装git"><a href="#1-1-1-安装git" class="headerlink" title="1.1.1 安装git"></a>1.1.1 安装git</h3><p><a href="https://git-scm.com/downloads" target="_blank" rel="noopener">git下载地址</a></p><p>默认安装，配置好默认的用户</p><pre><code class="bash">$ git config --global user.name &quot;you_name&quot;$ git config --global user.email you_email@example.com</code></pre><h3 id="1-1-2-安装node-js"><a href="#1-1-2-安装node-js" class="headerlink" title="1.1.2 安装node.js"></a>1.1.2 安装node.js</h3><p><a href="https://nodejs.org/en/download/" target="_blank" rel="noopener">node.js下载地址</a></p><p>默认安装即可</p><p>用zip安装时，配置两个环境变量：一个是PATH上增加node.exe的目录D:\nodejs,一个是增加环境变量NODE_PATH,值为D:\nodejs\node_modules。目录地址转换成你的。</p><h3 id="1-1-3-安装Hexo"><a href="#1-1-3-安装Hexo" class="headerlink" title="1.1.3 安装Hexo"></a>1.1.3 安装Hexo</h3><pre><code class="bash">$ cd d:/hexo$ npm install hexo-cli -g  #安装全局环境$ hexo init blog #你的博客环境$ cd blog$ npm install    # NPM是随同NodeJS一起安装的包管理工具$ hexo g         # 或者hexo generate$ hexo s         # 或者hexo server，可以在http://localhost:4000 查看效果</code></pre><p>如果由于管理员权限而失败，可以用win+x选择”命令提示符(管理员)“来操作</p><p>到这里你已经可以看到效果了<a href="http://localhost:4000" target="_blank" rel="noopener">http://localhost:4000</a>。</p><h2 id="1-2-GitHub配置"><a href="#1-2-GitHub配置" class="headerlink" title="1.2 GitHub配置"></a>1.2 GitHub配置</h2><p>（1）新建一个仓库，名字要和你用户名一样，例如：you_name.github.io ，GitHub会自动识别这次仓库为pages</p><p>（2）配置ssh秘钥，私钥自行保存，公钥放GitHub上</p><pre><code class="bash">$ ssh-keygen -t rsa -C &quot;your_email@youremail.com&quot; #或者下面这个$ ssh-keygen -t rsa -f sample                     #文件名命名为sample</code></pre><pre><code>-t 指定密钥类型，默认是 rsa ，可以省略。-C 设置注释文字，比如邮箱。-f 指定密钥文件存储文件名。</code></pre><p>SSH 在push的时候，如果配置SSH key的时候设置了密码，则需要输入密码的，否则直接是不需要输入密码的</p><p>目录文件C:\ Users\youname\.ssh\id_rsa.pub为你的公钥，id_rsa为私钥。公钥里面的内容复制到GitHub设置里。</p><p>然后配置~/.ssh/config文件,按照实际情况删减。</p><pre><code class="bash">host github.com#  port 22#  compression yes#  hostname 192.168.0.1  user git  identityfile ~/.ssh/id_rsa</code></pre><p>（3）初始化仓库，即是上传一个任意文件上去。新建完仓库后，GitHub上会有提示。</p><p>（4）部署到GitHub上</p><p>配置博客根目录的_config.yml文件，把GitHub仓库地址配置进去。</p><pre><code class="yaml">  deploy:    type: git    repo: git@github.com:loongX/loongX.github.io.git    branch: master</code></pre><p>  这里要注意一下，yml文件以缩进来区分各个元素的，所以缩进要一致。</p><p>在部署到GitHub前先要安装一个hexo-deployer-git插件。<br>Hexo提供了<a href="https://github.com/hexojs/hexo-deployer-git" target="_blank" rel="noopener">hexo-deployer-git</a>工具，可以帮助<a href="https://hexo.io/zh-cn/docs/deployment.html" target="_blank" rel="noopener">部署Hexo到很多平台</a>。</p><pre><code class="bash">$ npm install hexo-deployer-git --save</code></pre><p>在blog文件夹里</p><pre><code class="bash">$ hexo g$ hexo d  #部署到远程仓上。</code></pre><p>这里会部署到GitHub上，打开你的pages网址可以看到内容了（类似这个loongX.github.io网址）。</p><p>这个部署上传的是public目录下的文件，public文件夹里面保存的是生成的静态文件。</p><h2 id="1-3-Hexo-建设"><a href="#1-3-Hexo-建设" class="headerlink" title="1.3 Hexo 建设"></a>1.3 Hexo 建设</h2><p> <a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">hexo官方文档</a></p><h3 id="1-3-1-目录结构"><a href="#1-3-1-目录结构" class="headerlink" title="1.3.1 目录结构"></a>1.3.1 目录结构</h3><p>blog目录结构如下</p><pre><code>.├── _config.yml   #配置文件├── package.json  #应用程序的信息├── scaffolds     #模版文件夹├── source        #资源文件夹是存放用户资源的地方|   ├── _drafts   #草稿|   └── _posts    #正文└── themes        #主题文件夹</code></pre><h3 id="1-3-2-基础命令"><a href="#1-3-2-基础命令" class="headerlink" title="1.3.2 基础命令"></a>1.3.2 基础命令</h3><pre><code class="bash">$ hexo generate                # 简写：hexo g，生成静态文件，会在当前目录下生成一个public文件夹$ hexo server                  # 简写：hexo s，启动本地服务，用于博客的预览$ hexo deploy                  # 简写：hexo d，部署到远程（如GitHub，可以在_config.yml中配置）$ hexo new post-name           # 简写：hexo n post-name， 新建文章 $ hexo new page page-name      # 简写：hexo n page page-name，新建页面$ hexo d -g                    # 生成和部署$ hexo s -g                    # 生成和预览$ hexo new draft &lt;title&gt;       # 新建草稿，存放在source/_drafts$ hexo publish post &lt;title&gt;    # 发布草稿为文章，文章转移到source/_posts$ hexo s -g --drafts           # 显示草稿$ hexo new page tags           # 使用 Hexo 命令新建一个名为 tags 的页面$ hexo s -p 5000               # 更改端口号为5000</code></pre><h3 id="1-3-3-更换主题"><a href="#1-3-3-更换主题" class="headerlink" title="1.3.3 更换主题"></a>1.3.3 更换主题</h3><pre><code class="bash">$ hexo clean$ git clone https://github.com/MOxFIVE/hexo-theme-yelee.git themes/yelee</code></pre><p>然后修改Hexo目录下的<code>_config.yml</code>配置文件中的theme属性，将其设置为yelee。</p><h3 id="1-3-4-添加插件"><a href="#1-3-4-添加插件" class="headerlink" title="1.3.4 添加插件"></a>1.3.4 添加插件</h3><p>RSS 对应插件——feed插件<a href="https://github.com/hexojs/hexo-generator-feed" target="_blank" rel="noopener">https://github.com/hexojs/hexo-generator-feed</a></p><p>Sitemap for SEO 站点地图通用插件: <a href="https://github.com/ludoviclefevre/hexo-generator-seo-friendly-sitemap" target="_blank" rel="noopener">hexo-generator-seo-friendly-sitemap</a></p><p>百度专用Sitemap: <a href="https://github.com/coneycode/hexo-generator-baidu-sitemap" target="_blank" rel="noopener">hexo-generator-baidu-sitemap</a></p><p>添加插件添加sitemap和feed插件</p><pre><code>$ npm install hexo-generator-feed $ npm install hexo-generator-sitemap $ npm install hexo-generator-baidu-sitemap@0.1.1 --save</code></pre><p>修改_config.yml，增加以下内容</p><pre><code class="bash">Plugins:- hexo-generator-feed- hexo-generator-sitemap- hexo-generator-baidu-sitemap#Feed Atomfeed:  type: atom  path: atom.xml  limit: 20  hub:  content:  content_limit: 140  content_limit_delim: &#39; &#39;#通用sitemapsitemap: path: sitemap.xml #百度爬虫baidusitemap:path: baidusitemap.xml</code></pre><p>配完之后，就可以访问<code>http://loongx.github.io/atom.xml</code>和<code>http://loongx.github.io/sitemap.xml</code>，发现这两个文件已经成功生成了。</p><h3 id="1-3-5-绑定独立域名"><a href="#1-3-5-绑定独立域名" class="headerlink" title="1.3.5 绑定独立域名"></a>1.3.5 绑定独立域名</h3><p>先购买域名：</p><p><a href="http://www.net.cn/" target="_blank" rel="noopener">阿里云域名购买</a></p><p><a href="https://sg.godaddy.com/" target="_blank" rel="noopener">godaddy域名购买</a></p><p>然后在你的域名注册提供商那里配置DNS解析，你可以解析到ip也可也解析到域名</p><p>CNAME — www —默认线路—loongx.githut.io</p><p>CNAME—-@—-默认线路 —–loongx.githut.io</p><p>进入source目录下，添加CNAME文件</p><pre><code class="bash">$ cd source/$ touch CNAME$ echo &quot;okloong.com&quot; &gt;&gt; CNAME # 输入你的域名</code></pre><p>如果你按照下面步骤做了，在coding上也同样做了一个pages的话，你可以把国内的访问引向coding，国外的访问引向GitHub。</p><p>CNAME — www —默认线路—okayloong.coding.me</p><p>CNAME—-@—-默认线路 —–okayloong.coding.me</p><p>CNAME — www —海外线路—loongx.githut.io</p><p>CNAME—-@—-海外线路 —–loongx.githut.io</p><h3 id="1-3-6-写博客"><a href="#1-3-6-写博客" class="headerlink" title="1.3.6 写博客"></a>1.3.6 写博客</h3><ul><li>markdown编辑器</li></ul><p>hexo写博客是用markdown语法来写的，用具有markdown功能的软件会比较方便些，我这里用的是<strong>Typora</strong>，简单好用。</p><ul><li>文章目录分类</li></ul><p>在\source\_posts文件夹里面支持文件夹形式。如果你觉得你文章太多，想分类，你可以直接新建文件夹来分类各个文章，hexo会识别到文件夹里面的文件的。这样做只是为了你方便好看，但是hexo会忽略你的文件夹名字。</p><ul><li>插入本地图片</li></ul><p>使用本地路径：在hexo/source目录下新建一个img文件夹（其他名称也行），将图片放入该文件夹下，插入图片时链接即为：‘/img/图片名称’。 如果你用了文件夹放请加上文件夹名词，hexo这次会连带文件夹生成路径。</p><pre><code>![picture](/img/aaa/Koala.jpg)</code></pre><ul><li>插入歌曲</li></ul><p>这示例里面的链接是网易云音乐的分享链接</p><pre><code>&lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; width=330 height=86       src=&quot;http://music.163.com/outchain/player?type=2&amp;id=25706282&amp;auto=0&amp;height=66&quot;&gt;  &lt;/iframe&gt; </code></pre><ul><li>插入视频</li></ul><pre><code>&lt;iframe    height=498 width=510       src=&quot;http://player.youku.com/embed/XNjcyMDU4Njg0&quot;       frameborder=0 allowfullscreen&gt;  &lt;/iframe&gt;  </code></pre><h2 id="1-4-主题配置"><a href="#1-4-主题配置" class="headerlink" title="1.4 主题配置"></a>1.4 主题配置</h2><h3 id="1-4-1-yelee主题"><a href="#1-4-1-yelee主题" class="headerlink" title="1.4.1 yelee主题"></a>1.4.1 yelee主题</h3><p><a href="http://moxfive.coding.me/yelee" target="_blank" rel="noopener">yelee官方文档</a></p><p>大部分设置只要在主题下的_config.yml文件里配置就可以了，里面的注释说得很清楚了，官方文档也说得很详细。下面说一些特殊的。</p><blockquote><p><strong>配置文件中参数紧接的冒号后面都需要加一个空格！包括文章头的标题框里面的设置也是。</strong></p></blockquote><h4 id="1-4-1-1-标签、分类以及我的页面设置"><a href="#1-4-1-1-标签、分类以及我的页面设置" class="headerlink" title="1.4.1.1 标签、分类以及我的页面设置"></a>1.4.1.1 标签、分类以及我的页面设置</h4><p>1.标签云设置：<br>使用 Hexo 命令新建一个名为 tags 的页面即可</p><pre><code class="bash">hexo new page tags</code></pre><p>2.关于我页面</p><p>使用 Hexo 命令新建一个名为 about 的页面即可</p><pre><code class="bash">hexo new page about</code></pre><blockquote><p>该页面内容在文件 \hexo\source\about\index.md 中修改</p></blockquote><p>然后，将上面两个在下面配置中建立链接关系。</p><pre><code class="yaml">menu:  主页: /  所有文章: /archives/  标签云: /tags/  关于我: /about/</code></pre><blockquote><p>注意：<br>在hexo里面已经包含了tags和cataloges相关的设置了，不需要新建catalages page，分类和标签会显示在标签云里面。如果你在使用hexo new page catalages创建一个catalages分类，会只显示一个空白网页。</p></blockquote><p> <strong>博客模板修改</strong></p><p>将<code>\freeshow.github.io\scaffolds</code>下的post.md模板文件修改为如下：</p><pre><code class="markdown">---title: {{ title }}date: {{ date }}tags:categories:---</code></pre><p>当写文件时，就可以填写所属tags或categories了。<br>tags和categories都会显示在 <code>标签云</code> 中.</p><h4 id="1-4-1-2-修改文章置顶"><a href="#1-4-1-2-修改文章置顶" class="headerlink" title="1.4.1.2 修改文章置顶"></a>1.4.1.2 修改文章置顶</h4><p>主要是修改文章的排列规则</p><p><code>node_modules/hexo-generator-index/lib/generator.js</code></p><pre><code class="javascript">&#39;use strict&#39;;var pagination = require(&#39;hexo-pagination&#39;);module.exports = function(locals) {  var config = this.config;  var posts = locals.posts.sort(config.index_generator.order_by);  var paginationDir = config.pagination_dir || &#39;page&#39;;  var path = config.index_generator.path || &#39;&#39;;//****************开始添加*********  posts.data = posts.data.sort(function(a, b) {        if(a.top &amp;&amp; b.top) { // 两篇文章top都有定义            if(a.top == b.top) return b.date - a.date; // 若top值一样则按照文章日期降序排            else return b.top - a.top; // 否则按照top值降序排        }        else if(a.top &amp;&amp; !b.top) { // 以下是只有一篇文章top有定义，那么将有top的排在前面（这里用异或操作居然不行233）            return -1;        }        else if(!a.top &amp;&amp; b.top) {            return 1;        }        else return b.date - a.date; // 都没定义按照文章日期降序排    });  //****************添加结束*********  return pagination(path, posts, {    perPage: config.index_generator.per_page,    layout: [&#39;index&#39;, &#39;archive&#39;],    format: paginationDir + &#39;/%d/&#39;,    data: {      __index: true    }  });};</code></pre><p>然后在文章中，增加top值定义，值越大，文章排序越靠前。top值默认为0，若不设置top，则不参与排序。示例：</p><pre><code class="markdown">title: 为Hexo添加文章置顶功能categories: sampletags: simpletop: 1date: 2016-07-20 11:44:40</code></pre><p>如果想按更新时间排序：改一下上面的代码 中的<code>a.date</code>, <code>b.date</code> 分别改为 <code>a.updated</code>, <code>b.updated</code></p><h4 id="1-4-1-3-其他设置"><a href="#1-4-1-3-其他设置" class="headerlink" title="1.4.1.3 其他设置"></a>1.4.1.3 其他设置</h4><p><a href="https://github.com/MOxFIVE/hexo-theme-yelee/pull/186" target="_blank" rel="noopener">增加文章打赏功能</a><br><a href="https://github.com/MOxFIVE/hexo-theme-yelee/pull/173" target="_blank" rel="noopener">修复404在非根目录下错误链接，导致style.css无法正确获取</a></p><h3 id="1-4-2-Next主题"><a href="#1-4-2-Next主题" class="headerlink" title="1.4.2 Next主题"></a>1.4.2 Next主题</h3><p>Next是hexo框架上的一个主题。由于它简洁清晰，受很多人追捧。我也没忍住将个人博客主题换成next主题来试下效果。下面将讲述hexo的next主题的相关设置。</p><h4 id="1-4-2-1-添加标签页面"><a href="#1-4-2-1-添加标签页面" class="headerlink" title="1.4.2.1 添加标签页面"></a>1.4.2.1 添加标签页面</h4><ul><li>新建页面</li></ul><p>输入如下命令：</p><pre><code>$ hexo new page tags</code></pre><p>输入命令后，在<code>myBlog/source</code>下会新生成一个新的文件夹<code>tags</code>，在该文件夹下会有一个<code>index.md</code>文件。</p><ul><li>设置页面类型</li></ul><p>在上步新生成的<code>myBlog/source/tags/index.md</code>中添加<code>type: &quot;tags&quot;</code>，<code>index.md</code>文件内容如下：</p><pre><code>---title: 分类&amp;标签type: &quot;tags&quot;date: 2017-09-22 00:30:37---</code></pre><ul><li>设置具体文章的tags</li></ul><p>当要为某一篇文章添加标签，只需在<code>myBlog/source/_post</code>目录下的具体文章的tags中添加标签即可，如：</p><pre><code>---title: Next主题设置date: 2017-10-31 10:10:12tags: hexocategories:---</code></pre><h4 id="1-4-2-2-添加分类页面"><a href="#1-4-2-2-添加分类页面" class="headerlink" title="1.4.2.2 添加分类页面"></a>1.4.2.2 添加分类页面</h4><p>步骤与添加标签页面类似，具体如下：</p><ul><li>新建页面</li></ul><p>输入如下命令：</p><pre><code>hexo new page categories</code></pre><p>输入命令后，在<code>myBlog/source</code>下会新生成一个新的文件夹<code>categories</code>，在该文件夹下会有一个<code>index.md</code>文件。</p><ul><li>设置页面类型</li></ul><p>在上步新生成的<code>myBlog/source/categories/index.md</code>中添加<code>type: &quot;categories&quot;</code>，<code>index.md</code>文件内容如下：</p><pre><code>---title: categoriesdate: 2017-10-31 10:36:29type: &quot;categories&quot;---</code></pre><ul><li>设置具体文章的categories</li></ul><p>当要为某一篇文章添加分类，只需在<code>myBlog/source/_post</code>目录下的具体文章的categories中添加分类即可，如：</p><pre><code>---title: Next主题设置date: 2017-10-31 10:10:12tags: hexocategories:---</code></pre><h4 id="1-4-2-3-修改内容区域的宽度"><a href="#1-4-2-3-修改内容区域的宽度" class="headerlink" title="1.4.2.3 修改内容区域的宽度"></a>1.4.2.3 修改内容区域的宽度</h4><p>我们用Next主题是发现在电脑上阅读文章时内容两边留的空白较多，这样在浏览代码块时经常要滚动滚动条才能阅读完整，体验不是很好，下面提供修改内容区域的宽度的方法。<br>Next 对于内容的宽度的设定如下：</p><ul><li>700px，当屏幕宽度 &lt; 1600px</li><li>900px，当屏幕宽度 &gt;= 1600px</li><li>移动设备下，宽度自适应</li></ul><p>如果你需要修改内容的宽度，同样需要编辑样式文件。<br>在Mist和Muse风格可以用下面的方法：<br>编辑主题的 source/css/_variables/custom.styl 文件，新增变量：</p><pre><code>// 修改成你期望的宽度$content-desktop = 700px// 当视窗超过 1600px 后的宽度$content-desktop-large = 900px</code></pre><p>当你使用Pisces风格时可以用下面的方法，在 source/css/_variables/custom.styl 中添加：</p><pre><code>$main-desktop                   = 1200px$content-desktop                = 900px</code></pre><h4 id="1-4-3-4-分享样式修改"><a href="#1-4-3-4-分享样式修改" class="headerlink" title="1.4.3.4 分享样式修改"></a>1.4.3.4 分享样式修改</h4><p>jiathis样式可以在目录themes\next\layout_partials\share下的jiathis.swig文件里面修改。<br>在我的博客里，我把文字和栏目作了调整。<a href="http://www.jiathis.com/" target="_blank" rel="noopener">官网</a>上也有对应的代码参考。</p><pre><code>&lt;span class=&quot;jiathis_txt&quot;&gt;&lt;/span&gt;&lt;a class=&quot;jiathis_button_tsina&quot;&gt;&lt;/a&gt;&lt;a class=&quot;jiathis_button_tqq&quot;&gt;&lt;/a&gt;&lt;a class=&quot;jiathis_button_weixin&quot;&gt;&lt;/a&gt;&lt;a class=&quot;jiathis_button_cqq&quot;&gt;&lt;/span&gt;&lt;a class=&quot;jiathis_button_qzone&quot;&gt;&lt;/a&gt;&lt;a class=&quot;jiathis_button_douban&quot;&gt;&lt;/a&gt;&lt;a class=&quot;jiathis_button_fav&quot;&gt;&lt;/a&gt;&lt;a class=&quot;jiathis_button_copy&quot;&gt;&lt;/a&gt;&lt;a class=&quot;jiathis_button_email&quot;&gt;&lt;/a&gt;&lt;a class=&quot;jiathis_button_share&quot;&gt;&lt;/a&gt;</code></pre><h2 id="1-5-Coding设置"><a href="#1-5-Coding设置" class="headerlink" title="1.5 Coding设置"></a>1.5 Coding设置</h2><p>Coding像GitHub一样也提供pages功能，配置方法和GitHub配置差不多。这里用Coding是因为，GitHub在国内访问是比较慢的，Coding在国内访问就比较快一点，而且也方便百度搜索引擎抓取。在设置dns时候，把国内访问的流量引向Coding上，国外线访问就引向GitHub上，这样就比较合理一点。</p><h3 id="1-5-1-配置ssh秘钥"><a href="#1-5-1-配置ssh秘钥" class="headerlink" title="1.5.1 配置ssh秘钥"></a>1.5.1 配置ssh秘钥</h3><p>按照上面的给GitHub配置ssh秘钥的步骤同样给coding平台布置即可。</p><h3 id="1-5-2-建立coding-pages"><a href="#1-5-2-建立coding-pages" class="headerlink" title="1.5.2 建立coding-pages"></a>1.5.2 建立coding-pages</h3><p>下面是创建一个「项目 Pages」的操作示例：</p><p><strong>这里另外找一个test文件夹来测试就好了。</strong></p><p>1.登录 Coding.net，创建一个项目，项目名称为：user_name.coding.me</p><p>2.在本地创建一个项目文件夹，添加一个测试用的 index.html 文件。</p><pre><code class="html">&lt;html&gt;   &lt;head&gt;     &lt;title&gt;My Coding Pages&lt;/title&gt;   &lt;/head&gt;   &lt;body&gt;      &lt;h1&gt;Hello Coding!&lt;/h1&gt;   &lt;/body&gt;&lt;/html&gt;</code></pre><p>3.将项目文件夹初始化为 Git 版本库，提交 index.html 到版本库，并为项目添加远程仓库地址。</p><pre><code class="bash">git initgit add index.htmlgit commit -m &#39;init&#39;git remote add origin  git@git.coding.net:{user_name}/{project_name}</code></pre><blockquote><p>请别忘记将上面代码中的远程仓库地址的 {user_name} 和 {project _name} 替换成你自己的个性后缀（Global Key）和项目地址。</p></blockquote><p>4.在本地创建一个 <code>coding-pages</code> 分支，切换到该分支。</p><pre><code>git checkout -b coding-pages</code></pre><p>5.将 coding-pages 分支推送到 Coding.net。</p><pre><code>git push origin coding-pages</code></pre><p>6.在项目的「Pages 服务」设置中，选择部署来源为 <code>coding-pages</code> 分支，点击「保存」按钮。 稍等片刻即可完成部署并通过 <code>{user_name}.coding.me／{project_name}</code> 访问你的网站.</p><h3 id="1-5-3-部署博客"><a href="#1-5-3-部署博客" class="headerlink" title="1.5.3 部署博客"></a>1.5.3 部署博客</h3><p>在你的博客目录</p><p>在你博客根目录下的_config.yml文件里配置</p><pre><code class="yaml">deploy:  type: git  repo:      github: git@github.com:loongX/loongX.github.io.git,master     coding: git@git.coding.net:OkayLoong/Okayloong.coding.me.git,coding-pages</code></pre><p>部署到平台上：</p><pre><code class="bash">hexo d -g</code></pre><h3 id="1-5-4-自定义域名"><a href="#1-5-4-自定义域名" class="headerlink" title="1.5.4 自定义域名"></a>1.5.4 自定义域名</h3><p>coding的普通用户不能自定域名，也就是说你刚刚注册到的账户是没有这个功能的，你需要补充完资料，升级账户才能用。升级账户后，在“pages服务”里添加进你的域名进去，并配置好dns解析就好了。</p><h2 id="1-6-Hexo多电脑同步的方法"><a href="#1-6-Hexo多电脑同步的方法" class="headerlink" title="1.6 Hexo多电脑同步的方法"></a>1.6 Hexo多电脑同步的方法</h2><p>一般思路是，创建两个仓库，一个用来保存hexo源码，一个是用来保存生成的博客文件。为了源码的安全建议是把源码保存在一个私有仓内。这里我采用coding建立私有库。码云也提供私有库功能，方法类似。</p><p>说下这个两个仓库的结构：</p><p>Hexo-blog分支 – 用来保存所有Hexo的源文件</p><p>master分支 – 用来保存Hexo生成的博客文件</p><h3 id="1-6-1-创建私有仓库"><a href="#1-6-1-创建私有仓库" class="headerlink" title="1.6.1 创建私有仓库"></a>1.6.1 创建私有仓库</h3><p>在coding平台上创建一个私有项目，名称为Hexo-blog，并初始化仓库（按照上面的要求上传一个任意文件上去，否则后面的操作会报错）。</p><p>上传时候需要把主题里面的.git文件夹删掉，要不然上传到私有库时候会漏掉主题部分的代码的。</p><p>但这个有个问题，你删后，原来主题的有更新就得不到及时更新了。</p><pre><code class="bash">rm -fr ./themes/yelee/.git/   #删除主题里面的gitgit init                     #建立本地的git仓库git remote add origin git@git.coding.net:OkayLoong/hexo-blog.git  #添加远程仓，注意要添加ssh秘钥git add .git commit -m &quot;my first private hexo&quot;git push -u origin master</code></pre><p>但是如果你的主题改动比较大，更新反而很多冲突，那自己维护也行。不过这里有个取巧的办法。</p><p>主题刚下载还没同步到私有仓时候，把主题里面的.git文件夹删除掉，同步一下私有仓，然后<strong>撤销删除</strong>，把主题里面的.git文件夹还原回来。这时候，你两边的仓库都能更新了。</p><p>上传私有仓</p><pre><code class="bash">git status                     #这个只是查看状态，可以不写git add .                      #把整个文件夹添加进去git commit -m &quot;update&quot;         #git规定一定要写，要不然上传不了git push origin master         #简写 git push </code></pre><p>可以将上面的代码保存为deploy.sh，这样就不用每次都敲了。但注意不要用中文名。</p><p>拉取私有仓回本地</p><p>一般<code>git pull</code>就够了，但是如果有冲突可以按照下面的方式来解决，以远程仓库为标准代码覆盖原来的。</p><pre><code class="bash">git fetch --all                  #将git上所有文件拉取到本地git reset --hard origin/master   #强制将本地内容指向刚刚同步git云端内容</code></pre><h2 id="1-7-优化"><a href="#1-7-优化" class="headerlink" title="1.7 优化"></a>1.7 优化</h2><h3 id="1-7-1-图片优化"><a href="#1-7-1-图片优化" class="headerlink" title="1.7.1 图片优化"></a>1.7.1 图片优化</h3><p>图片存放有两种方式，图片可放到CDN上缓存，或者放到本地保存，然后调用时候写上图片的链接或路径即可。我选择了放到本地。但是这么做会有两个问题，如果文章目录比较深，而图片放到/source/images目录下面的话，编写文章时候写的路径不会有预览，要替换图片时候，不好找图片，也不方便管理。针对这问题，我是把图片放到和文章同一级目录下的images文件夹，这样管理和预览这两个问题就很好解决了。生成博客时候需要把图片提取到/source/images目录下。</p><p>为了方便管理我做了一个下面这么一个脚本。</p><ul><li>update-picture.sh</li></ul><pre><code class="shell">#!/bin/sh#文章图片放到文章当前的images文件夹下面，这主要是为了写文章方便看图#生成博客时候把图片同步到./source/images目录下echo &quot;######  rmove&quot;    rm -rfv ./source/images/*    echo &quot;######  copy&quot;find ./source/_posts  -name &#39;images&#39; -type d | xargs -i cp -avx {} ./source/find ./source/system  -name &#39;images&#39; -type d | xargs -i cp -avx {} ./source/</code></pre><p>git上传源码时候如果连同/source/images目录下的图片一并上传的话，那么会有两份相同图片，一份是文章目录下的图片，另外一份是这个/source/images目录下的，鉴此，我就忽略上传/source/images文件夹了。在ignore文件里面添加<code>source/images/</code>。如果之前有同步过这个文件夹下的图片，那么则需要删掉缓存和git后台的对应文件。</p><p>还有一点就是，如果这么做，图片要起一个全局唯一的名称，或者在image里面设置多重文件夹里面来区分识别。</p><h1 id="二、Linux环境"><a href="#二、Linux环境" class="headerlink" title="二、Linux环境"></a>二、Linux环境</h1><p>大部分会和Windows差不多，重复的就不多说了。我用的是Ubuntu系统。</p><h2 id="2-1-环境搭建"><a href="#2-1-环境搭建" class="headerlink" title="2.1 环境搭建"></a>2.1 环境搭建</h2><p>安装node.js, npm ,hexo</p><ul><li><p>安装node.js,npm</p><p><a href="https://nodejs.org/en/download/" target="_blank" rel="noopener">官网</a>下载源码,然后解压,进入起文件夹进行编译.如果你下的是二进制文件就复制到对应文件夹下面,并添加环境变量.</p><pre><code class="shell">./configure --prefix=/usr/local/node/node-v8.9.1 #配置参数,指定了安装目录makesudo make installsudo gedit /etc/profile#添加路径进去#后来用sudo执行时候没有这个环境变量,我也在/root/.bashrc下添加了路径#set for nodejsexport NODE_HOME=/usr/local/node/node-v8.9.1export PATH=$NODE_HOME/bin:$PATH#一般是重启会设置路径,如果想立刻看到效果,执行下面的命令source /etc/profilenode -vnpm -v</code></pre><p>除了源码编译外,你也可以下载编译好的包,解压到对应文件夹</p><p>下面这个是直接安装方式,但是版本会比较旧</p><pre><code>sudo apt install nodejssudo apt isntall npm</code></pre><p>其他命令</p><pre><code>npm install npm -g  #升级npmnpm install module_name #安装模块npm ls -g   #查看所有全局安装的npm模块npm uninstall module_name #卸载模块npm update module_name #升级模块</code></pre></li><li><p>安装hexo</p><pre><code>npm install -g hexo-cli</code></pre><p>执行这个时候可能会有权限问题，因为你用的是sudo的权限make进去的，用户拥有者为root，同一个用户组没有写权限。你可以用下面的命令修改。</p><pre><code>sudo chmod -R 775 /usr/local/node #更改权限#或者下面这条命令sudo chown -R ubuntu:root /usr/local/node #更改拥有者</code></pre><p>-R参数是递归 处理目录下的所有文件以及子文件</p><p>775是权限设置</p><p>ubuntu:root表示用户和用户组,用户组非必须。</p></li><li><p>blog源码移植</p><p>你之前的blog是在windows系统上写的，现在移植到Ubuntu系统上，那么只要下载blog代码到本地，添加node的相关插件，基本可以了。</p><p>如果你是有写脚步来辅助的，可能会并没有相关的执行权限。可以用下面的方式来添加执行权限。</p><pre><code class="shell">find *.sh | xargs -i chmod +x {}</code></pre><p>出现“pull.sh: 5: pull.sh: Syntax error: “(“ unexpected”错误，那是因为Ubuntu系统默认的sh为Dash，语法有点不同。脚步里面可以改为<code>#!/bin/bash</code> 或 <code>#!/usr/bin/env bash</code>。但是为了windows端和linux端同步，我决定改该shell为bash shell。</p><pre><code class="shell">sudo dpkg-reconfigure dash #选择”否“ls -l /bin/sh #查看效果</code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blog </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
